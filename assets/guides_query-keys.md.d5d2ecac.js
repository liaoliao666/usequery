import{l as n,f as s,G as a}from"./framework.dc3bd9a4.js";const t='{"title":"Query Keys","description":"","frontmatter":{"id":"query-keys","title":"Query Keys"},"headers":[{"level":3,"title":"String-Only Query Keys","slug":"string-only-query-keys"},{"level":3,"title":"Array Keys","slug":"array-keys"},{"level":3,"title":"Query Keys are hashed deterministically!","slug":"query-keys-are-hashed-deterministically"},{"level":2,"title":"If your query function depends on a variable, include it in your query key","slug":"if-your-query-function-depends-on-a-variable-include-it-in-your-query-key"}],"relativePath":"guides/query-keys.md","lastUpdated":1610694116660}',e={},o=a('<p>At its core, Vu Query manages query caching for you based on query keys. Query keys can be as simple as a string, or as complex as an array of many strings and nested objects. As long as the query key is serializable, and <strong>unique to the query&#39;s data</strong>, you can use it!</p><h3 id="string-only-query-keys"><a class="header-anchor" href="#string-only-query-keys" aria-hidden="true">#</a> String-Only Query Keys</h3><p>The simplest form of a key is actually not an array, but an individual string. When a string query key is passed, it is converted to an array internally with the string as the only item in the query key. This format is useful for:</p><ul><li>Generic List/Index resources</li><li>Non-hierarchical resources</li></ul><div class="language-js"><pre><code><span class="token comment">// A list of todos</span>\n<span class="token function">useQuery</span><span class="token punctuation">(</span><span class="token string">&#39;todos&#39;</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">)</span> <span class="token comment">// queryKey === [&#39;todos&#39;]</span>\n\n<span class="token comment">// Something else, whatever!</span>\n<span class="token function">useQuery</span><span class="token punctuation">(</span><span class="token string">&#39;somethingSpecial&#39;</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">)</span> <span class="token comment">// queryKey === [&#39;somethingSpecial&#39;]</span>\n</code></pre></div><h3 id="array-keys"><a class="header-anchor" href="#array-keys" aria-hidden="true">#</a> Array Keys</h3><p>When a query needs more information to uniquely describe its data, you can use an array with a string and any number of serializable objects to describe it. This is useful for:</p><ul><li>Hierarchical or nested resources <ul><li>It&#39;s common to pass an ID, index, or other primitive to uniquely identify the item</li></ul></li><li>Queries with additional parameters <ul><li>It&#39;s common to pass an object of additional options</li></ul></li></ul><div class="language-js"><pre><code><span class="token comment">// An individual todo</span>\n<span class="token function">useQuery</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;todo&#39;</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">)</span>\n<span class="token comment">// queryKey === [&#39;todo&#39;, 5]</span>\n\n<span class="token comment">// And individual todo in a &quot;preview&quot; format</span>\n<span class="token function">useQuery</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;todo&#39;</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> preview<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">)</span>\n<span class="token comment">// queryKey === [&#39;todo&#39;, 5, { preview: true }]</span>\n\n<span class="token comment">// A list of todos that are &quot;done&quot;</span>\n<span class="token function">useQuery</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;todos&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> type<span class="token operator">:</span> <span class="token string">&#39;done&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">)</span>\n<span class="token comment">// queryKey === [&#39;todos&#39;, { type: &#39;done&#39; }]</span>\n</code></pre></div><h3 id="query-keys-are-hashed-deterministically"><a class="header-anchor" href="#query-keys-are-hashed-deterministically" aria-hidden="true">#</a> Query Keys are hashed deterministically!</h3><p>This means that no matter the order of keys in objects, all of the following queries are considered equal:</p><div class="language-js"><pre><code><span class="token function">useQuery</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;todos&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> status<span class="token punctuation">,</span> page <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">)</span>\n<span class="token function">useQuery</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;todos&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> page<span class="token punctuation">,</span> status <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">)</span>\n<span class="token function">useQuery</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;todos&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> page<span class="token punctuation">,</span> status<span class="token punctuation">,</span> other<span class="token operator">:</span> <span class="token keyword">undefined</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">)</span>\n</code></pre></div><p>The following query keys, however, are not equal. Array item order matters!</p><div class="language-js"><pre><code><span class="token function">useQuery</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;todos&#39;</span><span class="token punctuation">,</span> status<span class="token punctuation">,</span> page<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">)</span>\n<span class="token function">useQuery</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;todos&#39;</span><span class="token punctuation">,</span> page<span class="token punctuation">,</span> status<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">)</span>\n<span class="token function">useQuery</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;todos&#39;</span><span class="token punctuation">,</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span> page<span class="token punctuation">,</span> status<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">)</span>\n</code></pre></div><h2 id="if-your-query-function-depends-on-a-variable-include-it-in-your-query-key"><a class="header-anchor" href="#if-your-query-function-depends-on-a-variable-include-it-in-your-query-key" aria-hidden="true">#</a> If your query function depends on a variable, include it in your query key</h2><p>Since query keys uniquely describe the data they are fetching, they should include any variables you use in your query function that <strong>change</strong>. For example:</p><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">Todos</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> completed <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">useQuery</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;todos&#39;</span><span class="token punctuation">,</span> todoId<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">fetchTodoById</span><span class="token punctuation">(</span>todoId<span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre></div>',17);e.render=function(a,t,e,p,u,c){return n(),s("div",null,[o])};export default e;export{t as __pageData};
