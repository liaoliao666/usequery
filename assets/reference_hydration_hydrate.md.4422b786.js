import{l as e,f as t,G as n}from"./framework.dc3bd9a4.js";const o='{"title":"hydration/hydrate","description":"","frontmatter":{"id":"hydration/hydrate","title":"hydration/hydrate"},"relativePath":"reference/hydration/hydrate.md","lastUpdated":1610589058669}',a={},i=n('<p><code>hydrate</code> adds a previously dehydrated state into a <code>cache</code>. If the queries included in dehydration already exist in the queryCache, <code>hydrate</code> does not overwrite them.</p><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> hydrate <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;v-use-query/hydration&#39;</span>\n\n<span class="token function">hydrate</span><span class="token punctuation">(</span>queryClient<span class="token punctuation">,</span> dehydratedState<span class="token punctuation">,</span> options<span class="token punctuation">)</span>\n</code></pre></div><p><strong>Options</strong></p><ul><li><code>client: QueryClient</code><ul><li><strong>Required</strong></li><li>The <code>queryClient</code> to hydrate the state into</li></ul></li><li><code>dehydratedState: DehydratedState</code><ul><li><strong>Required</strong></li><li>The state to hydrate into the client</li></ul></li><li><code>options: HydrateOptions</code><ul><li>Optional</li><li><code>defaultOptions: DefaultOptions</code><ul><li>Optional</li><li><code>mutations: MutationOptions</code> The default mutation options to use for the hydrated mutations.</li><li><code>queries: QueryOptions</code> The default query options to use for the hydrated queries.</li></ul></li></ul></li></ul>',4);a.render=function(n,o,a,s,d,r){return e(),t("div",null,[i])};export default a;export{o as __pageData};
