import{l as a,f as s,G as e}from"./framework.dc3bd9a4.js";const n='{"title":"Persist - LocalStorage (Experimental)","description":"","frontmatter":{"id":"persist-localstorage","title":"Persist - LocalStorage (Experimental)"},"headers":[{"level":2,"title":"Installation","slug":"installation"},{"level":2,"title":"Usage","slug":"usage"},{"level":2,"title":"How does it work?","slug":"how-does-it-work"},{"level":2,"title":"Cache Busting","slug":"cache-busting"},{"level":2,"title":"API","slug":"api"},{"level":3,"title":"persistWithLocalStorage","slug":"persistwithlocalstorage"},{"level":3,"title":"Options","slug":"options"}],"relativePath":"plugins/persist-localstorage.md","lastUpdated":1611340383540}',t={},o=e('<blockquote><p>VERY IMPORTANT: This plugin is currently in an experimental stage. This means that breaking changes will happen in minor and patch releases. Use at your own risk. If you choose to rely on this in production in an experimental stage, please lock your version to a patch-level version to avoid unexpected breakages.</p></blockquote><h2 id="installation"><a class="header-anchor" href="#installation" aria-hidden="true">#</a> Installation</h2><p>This plugin comes packaged with <code>vu-query</code> and is available under the <code>vu-query/persist-localstorage-experimental</code> import.</p><h2 id="usage"><a class="header-anchor" href="#usage" aria-hidden="true">#</a> Usage</h2><p>Import the <code>persistWithLocalStorage</code> function, and pass it your <code>QueryClient</code> instance!</p><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> persistWithLocalStorage <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vu-query/persist-localstorage-experimental&#39;</span>\n\n<span class="token keyword">const</span> queryClient <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n<span class="token function">persistWithLocalStorage</span><span class="token punctuation">(</span>queryClient<span class="token punctuation">)</span>\n</code></pre></div><h2 id="how-does-it-work"><a class="header-anchor" href="#how-does-it-work" aria-hidden="true">#</a> How does it work?</h2><p>As you use your application:</p><ul><li>When your query/mutation cache is updated, it will be dehydrated and serialized into localstorage. <strong>By default</strong>, this action is throttled to happen at most every 1 second to save on potentially expensive writes to localstorage, but can be customized as you see fit.</li></ul><p>When you reload/bootstrap your app:</p><ul><li>Attempts to load a previously persisted dehydrated query/mutation cache from localstorage</li><li>If a cache is found that is older than the <code>maxAge</code> (which by default is 24 hours), it will be discarded. This can be customized as you see fit.</li></ul><h2 id="cache-busting"><a class="header-anchor" href="#cache-busting" aria-hidden="true">#</a> Cache Busting</h2><p>Sometimes you may make changes to your application or data that immediately invalidate any and all cached data. If and when this happens, you can pass a <code>buster</code> string option to <code>persistWithLocalStorage</code>, and if the cache that is found does not also have that buster string, it will be discarded.</p><div class="language-js"><pre><code><span class="token function">persistWithLocalStorage</span><span class="token punctuation">(</span>queryClient<span class="token punctuation">,</span> <span class="token punctuation">{</span> buster<span class="token operator">:</span> buildHash <span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><h2 id="api"><a class="header-anchor" href="#api" aria-hidden="true">#</a> API</h2><h3 id="persistwithlocalstorage"><a class="header-anchor" href="#persistwithlocalstorage" aria-hidden="true">#</a> <code>persistWithLocalStorage</code></h3><p>Pass this function a <code>QueryClient</code> instance to persist it to localstorage.</p><div class="language-js"><pre><code><span class="token function">persistWithLocalStorage</span><span class="token punctuation">(</span>queryClient<span class="token punctuation">,</span> options<span class="token punctuation">)</span>\n</code></pre></div><h3 id="options"><a class="header-anchor" href="#options" aria-hidden="true">#</a> <code>Options</code></h3><p>An optional object of options:</p><div class="language-js"><pre><code><span class="token keyword">interface</span> <span class="token class-name">Options</span> <span class="token punctuation">{</span>\n  <span class="token comment">/** The key to use when storing the cache to localstorage */</span>\n  localStorageKey<span class="token operator">?</span><span class="token operator">:</span> string\n  <span class="token comment">/** To avoid localstorage spamming,\n   * pass a time in ms to throttle saving the cache to disk */</span>\n  throttleTime<span class="token operator">?</span><span class="token operator">:</span> number\n  <span class="token comment">/** The max-allowed age of the cache.\n   * If a persisted cache is found that is older than this\n   * time, it will be discarded */</span>\n  maxAge<span class="token operator">?</span><span class="token operator">:</span> number\n  <span class="token comment">/** A unique string that can be used to forcefully\n   * invalidate existing caches if they do not share the same buster string */</span>\n  buster<span class="token operator">?</span><span class="token operator">:</span> string\n<span class="token punctuation">}</span>\n</code></pre></div><p>The default options are:</p><div class="language-js"><pre><code><span class="token punctuation">{</span>\n  localStorageKey <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">VU_QUERY_OFFLINE_CACHE</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n  throttleTime <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">,</span>\n  maxAge <span class="token operator">=</span> <span class="token number">1000</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">24</span><span class="token punctuation">,</span> <span class="token comment">// 24 hours</span>\n  buster <span class="token operator">=</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n</code></pre></div>',23);t.render=function(e,n,t,p,i,l){return a(),s("div",null,[o])};export default t;export{n as __pageData};
