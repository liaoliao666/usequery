import{l as n,f as a,G as s}from"./framework.dc3bd9a4.js";const e='{"title":"Migrating to Vu Query 3","description":"","frontmatter":{"id":"migrating-to-vu-query-3","title":"Migrating to Vu Query 3"},"headers":[{"level":2,"title":"Overview","slug":"overview"},{"level":2,"title":"Breaking Changes","slug":"breaking-changes"},{"level":3,"title":"The QueryCache has been split into a QueryClient and lower-level QueryCache and MutationCache instances.","slug":"the-querycache-has-been-split-into-a-queryclient-and-lower-level-querycache-and-mutationcache-instances"},{"level":3,"title":"ReactQueryConfigProvider and ReactQueryCacheProvider have both been replaced by QueryClientProvider","slug":"reactqueryconfigprovider-and-reactquerycacheprovider-have-both-been-replaced-by-queryclientprovider"},{"level":3,"title":"The default QueryCache is gone. For real this time!","slug":"the-default-querycache-is-gone-for-real-this-time"},{"level":3,"title":"The deprecated makeQueryCache utility has been removed.","slug":"the-deprecated-makequerycache-utility-has-been-removed"},{"level":3,"title":"QueryCache.prefetchQuery() has been moved to QueryClient.prefetchQuery()","slug":"querycache-prefetchquery-has-been-moved-to-queryclient-prefetchquery"},{"level":3,"title":"ReactQueryErrorResetBoundary and QueryCache.resetErrorBoundaries() have been replaced by QueryErrorResetBoundary and useQueryErrorResetBoundary().","slug":"reactqueryerrorresetboundary-and-querycache-reseterrorboundaries-have-been-replaced-by-queryerrorresetboundary-and-usequeryerrorresetboundary"},{"level":3,"title":"QueryCache.getQuery() has been replaced by QueryCache.find().","slug":"querycache-getquery-has-been-replaced-by-querycache-find"},{"level":3,"title":"QueryCache.getQueries() has been moved to QueryCache.findAll().","slug":"querycache-getqueries-has-been-moved-to-querycache-findall"},{"level":3,"title":"QueryCache.isFetching has been moved to QueryClient.isFetching().","slug":"querycache-isfetching-has-been-moved-to-queryclient-isfetching"},{"level":3,"title":"The useQueryCache hook has been replaced by the useQueryClient hook.","slug":"the-usequerycache-hook-has-been-replaced-by-the-usequeryclient-hook"},{"level":3,"title":"Query key parts/pieces are no longer automatically spread to the query function.","slug":"query-key-parts-pieces-are-no-longer-automatically-spread-to-the-query-function"},{"level":3,"title":"Infinite Query Page params are now passed via QueryFunctionContext.pageParam","slug":"infinite-query-page-params-are-now-passed-via-queryfunctioncontext-pageparam"},{"level":3,"title":"usePaginatedQuery() has been deprecated in favor of the keepPreviousData option","slug":"usepaginatedquery-has-been-deprecated-in-favor-of-the-keeppreviousdata-option"},{"level":3,"title":"useInfiniteQuery() is now bi-directional","slug":"useinfinitequery-is-now-bi-directional"},{"level":3,"title":"Infinite Query data now contains the array of pages and pageParams used to fetch those pages.","slug":"infinite-query-data-now-contains-the-array-of-pages-and-pageparams-used-to-fetch-those-pages"},{"level":3,"title":"useMutation now returns an object instead of an array","slug":"usemutation-now-returns-an-object-instead-of-an-array"},{"level":3,"title":"mutation.mutate no longer return a promise","slug":"mutation-mutate-no-longer-return-a-promise"},{"level":3,"title":"The object syntax for useQuery now uses a collapsed config:","slug":"the-object-syntax-for-usequery-now-uses-a-collapsed-config"},{"level":3,"title":"If set, the QueryOptions.enabled option must be a boolean (true/false)","slug":"if-set-the-queryoptions-enabled-option-must-be-a-boolean-true-false"},{"level":3,"title":"The QueryOptions.initialStale option has been removed","slug":"the-queryoptions-initialstale-option-has-been-removed"},{"level":3,"title":"The QueryOptions.forceFetchOnMount option has been replaced by refetchOnMount: \'always\'","slug":"the-queryoptions-forcefetchonmount-option-has-been-replaced-by-refetchonmount-always"},{"level":3,"title":"The QueryOptions.refetchOnMount options now only applies to its parent component instead of all query observers","slug":"the-queryoptions-refetchonmount-options-now-only-applies-to-its-parent-component-instead-of-all-query-observers"},{"level":3,"title":"The QueryOptions.queryFnParamsFilter has been removed in favor of the new QueryFunctionContext object.","slug":"the-queryoptions-queryfnparamsfilter-has-been-removed-in-favor-of-the-new-queryfunctioncontext-object"},{"level":3,"title":"The QueryOptions.notifyOnStatusChange option has been superceded by the new notifyonChangeProps and notifyOnChangePropsExclusions options.","slug":"the-queryoptions-notifyonstatuschange-option-has-been-superceded-by-the-new-notifyonchangeprops-and-notifyonchangepropsexclusions-options"},{"level":3,"title":"The QueryResult.clear() function has been renamed to QueryResult.remove()","slug":"the-queryresult-clear-function-has-been-renamed-to-queryresult-remove"},{"level":3,"title":"The QueryResult.updatedAt property has been split into QueryResult.dataUpdatedAt and QueryResult.errorUpdatedAt properties","slug":"the-queryresult-updatedat-property-has-been-split-into-queryresult-dataupdatedat-and-queryresult-errorupdatedat-properties"},{"level":3,"title":"setConsole() has been replaced by the new setLogger() function","slug":"setconsole-has-been-replaced-by-the-new-setlogger-function"},{"level":3,"title":"React Native no longer requires overriding the logger","slug":"react-native-no-longer-requires-overriding-the-logger"},{"level":2,"title":"New features","slug":"new-features"},{"level":3,"title":"Devtools are now part of the main repo and npm package","slug":"devtools-are-now-part-of-the-main-repo-and-npm-package"}],"relativePath":"guides/migrating-to-react-query-3.md","lastUpdated":1610594008257}',t={},o=s('<p>Previous versions of Vu Query were awesome and brought some amazing new features, more magic, and an overall better experience to the library. They also brought on massive adoption and likewise a lot of refining fire (issues/contributions) to the library and brought to light a few things that needed more polish to make the library even better. v3 contains that very polish.</p><h2 id="overview"><a class="header-anchor" href="#overview" aria-hidden="true">#</a> Overview</h2><ul><li>More scalable and testable cache configuration</li><li>Better SSR support</li><li>Data-lag (previously usePaginatedQuery) anywhere!</li><li>Bi-directional Infinite Queries</li><li>Query data selectors!</li><li>Fully configure defaults for queries and/or mutations before use</li><li>More granularity for optional rendering optimization</li><li>New <code>useQueries</code> hook! (Variable-length parallel query execution)</li><li>Query filter support for the <code>useIsFetching()</code> hook!</li><li>Retry/offline/replay support for mutations</li><li>Observe queries/mutations outside of React</li><li>Use the Vu Query core logic anywhere you want!</li><li>Bundled/Colocated Devtools via <code>vu-query/devtools</code></li><li>Cache Persistence to localstorage (experimental via <code>vu-query/persist-localstorage-experimental</code>)</li></ul><h2 id="breaking-changes"><a class="header-anchor" href="#breaking-changes" aria-hidden="true">#</a> Breaking Changes</h2><h3 id="the-querycache-has-been-split-into-a-queryclient-and-lower-level-querycache-and-mutationcache-instances"><a class="header-anchor" href="#the-querycache-has-been-split-into-a-queryclient-and-lower-level-querycache-and-mutationcache-instances" aria-hidden="true">#</a> The <code>QueryCache</code> has been split into a <code>QueryClient</code> and lower-level <code>QueryCache</code> and <code>MutationCache</code> instances.</h3><p>The <code>QueryCache</code> contains all queries, the <code>MutationCache</code> contains all mutations, and the <code>QueryClient</code> can be used to set configuration and to interact with them.</p><p>This has some benefits:</p><ul><li>Allows for different types of caches.</li><li>Multiple clients with different configurations can use the same cache.</li><li>Clients can be used to track queries, which can be used for shared caches on SSR.</li><li>The client API is more focused towards general usage.</li><li>Easier to test the individual components.</li></ul><p>When creating a <code>new QueryClient()</code>, a <code>QueryCache</code> and <code>MutationCache</code> are automatically created for you if you don&#39;t supply them.</p><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> QueryClient <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vu-query&#39;</span>\n\n<span class="token keyword">const</span> queryClient <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre></div><h3 id="reactqueryconfigprovider-and-reactquerycacheprovider-have-both-been-replaced-by-queryclientprovider"><a class="header-anchor" href="#reactqueryconfigprovider-and-reactquerycacheprovider-have-both-been-replaced-by-queryclientprovider" aria-hidden="true">#</a> <code>ReactQueryConfigProvider</code> and <code>ReactQueryCacheProvider</code> have both been replaced by <code>QueryClientProvider</code></h3><p>Default options for queries and mutations can now be specified in <code>QueryClient</code>:</p><div class="language-js"><pre><code><span class="token keyword">const</span> queryClient <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryClient</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  defaultOptions<span class="token operator">:</span> <span class="token punctuation">{</span>\n    queries<span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token comment">// query options</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    mutations<span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token comment">// mutation options</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><p>The <code>QueryClientProvider</code> component is now used to connect a <code>QueryClient</code> to your application:</p><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> QueryClient<span class="token punctuation">,</span> QueryClientProvider <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vu-query&#39;</span>\n\n<span class="token keyword">const</span> queryClient <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n<span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token operator">&lt;</span>QueryClientProvider client<span class="token operator">=</span><span class="token punctuation">{</span>queryClient<span class="token punctuation">}</span><span class="token operator">&gt;</span><span class="token operator">...</span><span class="token operator">&lt;</span><span class="token operator">/</span>QueryClientProvider<span class="token operator">&gt;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h3 id="the-default-querycache-is-gone-for-real-this-time"><a class="header-anchor" href="#the-default-querycache-is-gone-for-real-this-time" aria-hidden="true">#</a> The default <code>QueryCache</code> is gone. <strong>For real this time!</strong></h3><p>As previously noted with a deprecation, there is no longer a default <code>QueryCache</code> that is created or exported from the main package. <strong>You must create your own via <code>new QueryClient()</code> or <code>new QueryCache()</code> (which you can then pass to <code>new QueryClient({ queryCache })</code> )</strong></p><h3 id="the-deprecated-makequerycache-utility-has-been-removed"><a class="header-anchor" href="#the-deprecated-makequerycache-utility-has-been-removed" aria-hidden="true">#</a> The deprecated <code>makeQueryCache</code> utility has been removed.</h3><p>It&#39;s been a long time coming, but it&#39;s finally gone 😃</p><h3 id="querycache-prefetchquery-has-been-moved-to-queryclient-prefetchquery"><a class="header-anchor" href="#querycache-prefetchquery-has-been-moved-to-queryclient-prefetchquery" aria-hidden="true">#</a> <code>QueryCache.prefetchQuery()</code> has been moved to <code>QueryClient.prefetchQuery()</code></h3><p>The new <code>QueryClient.prefetchQuery()</code> function is async, but <strong>does not return the data from the query</strong>. If you require the data, use the new <code>QueryClient.fetchQuery()</code> function</p><div class="language-js"><pre><code><span class="token comment">// Prefetch a query:</span>\n<span class="token keyword">await</span> queryClient<span class="token punctuation">.</span><span class="token function">prefetchQuery</span><span class="token punctuation">(</span><span class="token string">&#39;posts&#39;</span><span class="token punctuation">,</span> fetchPosts<span class="token punctuation">)</span>\n\n<span class="token comment">// Fetch a query:</span>\n<span class="token keyword">try</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token keyword">await</span> queryClient<span class="token punctuation">.</span><span class="token function">fetchQuery</span><span class="token punctuation">(</span><span class="token string">&#39;posts&#39;</span><span class="token punctuation">,</span> fetchPosts<span class="token punctuation">)</span>\n<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// Error handling</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h3 id="reactqueryerrorresetboundary-and-querycache-reseterrorboundaries-have-been-replaced-by-queryerrorresetboundary-and-usequeryerrorresetboundary"><a class="header-anchor" href="#reactqueryerrorresetboundary-and-querycache-reseterrorboundaries-have-been-replaced-by-queryerrorresetboundary-and-usequeryerrorresetboundary" aria-hidden="true">#</a> <code>ReactQueryErrorResetBoundary</code> and <code>QueryCache.resetErrorBoundaries()</code> have been replaced by <code>QueryErrorResetBoundary</code> and <code>useQueryErrorResetBoundary()</code>.</h3><p>Together, these provide the same experience as before, but with added control to choose which component trees you want to reset. For more information, see:</p><ul><li><a href="./../reference/QueryErrorResetBoundary.html">QueryErrorResetBoundary</a></li><li><a href="./../reference/useQueryErrorResetBoundary.html">useQueryErrorResetBoundary</a></li></ul><h3 id="querycache-getquery-has-been-replaced-by-querycache-find"><a class="header-anchor" href="#querycache-getquery-has-been-replaced-by-querycache-find" aria-hidden="true">#</a> <code>QueryCache.getQuery()</code> has been replaced by <code>QueryCache.find()</code>.</h3><p><code>QueryCache.find()</code> should now be used to look up individual queries from a cache</p><h3 id="querycache-getqueries-has-been-moved-to-querycache-findall"><a class="header-anchor" href="#querycache-getqueries-has-been-moved-to-querycache-findall" aria-hidden="true">#</a> <code>QueryCache.getQueries()</code> has been moved to <code>QueryCache.findAll()</code>.</h3><p><code>QueryCache.findAll()</code> should now be used to look up multiple queries from a cache</p><h3 id="querycache-isfetching-has-been-moved-to-queryclient-isfetching"><a class="header-anchor" href="#querycache-isfetching-has-been-moved-to-queryclient-isfetching" aria-hidden="true">#</a> <code>QueryCache.isFetching</code> has been moved to <code>QueryClient.isFetching()</code>.</h3><p><strong>Notice that it&#39;s now a function instead of a property</strong></p><h3 id="the-usequerycache-hook-has-been-replaced-by-the-usequeryclient-hook"><a class="header-anchor" href="#the-usequerycache-hook-has-been-replaced-by-the-usequeryclient-hook" aria-hidden="true">#</a> The <code>useQueryCache</code> hook has been replaced by the <code>useQueryClient</code> hook.</h3><p>It returns the provided <code>queryClient</code> for its component tree and shouldn&#39;t need much tweaking beyond a rename.</p><h3 id="query-key-parts-pieces-are-no-longer-automatically-spread-to-the-query-function"><a class="header-anchor" href="#query-key-parts-pieces-are-no-longer-automatically-spread-to-the-query-function" aria-hidden="true">#</a> Query key parts/pieces are no longer automatically spread to the query function.</h3><p>Inline functions are now the suggested way of passing parameters to your query functions:</p><div class="language-js"><pre><code><span class="token comment">// Old</span>\n<span class="token function">useQuery</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;post&#39;</span><span class="token punctuation">,</span> id<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">_key<span class="token punctuation">,</span> id</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">fetchPost</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span>\n\n<span class="token comment">// New</span>\n<span class="token function">useQuery</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;post&#39;</span><span class="token punctuation">,</span> id<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">fetchPost</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre></div><p>If you still insist on not using inline functions, you can use the newly passed <code>QueryFunctionContext</code>:</p><div class="language-js"><pre><code><span class="token function">useQuery</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;post&#39;</span><span class="token punctuation">,</span> id<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token parameter">context</span> <span class="token operator">=&gt;</span> <span class="token function">fetchPost</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span>queryKey<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre></div><h3 id="infinite-query-page-params-are-now-passed-via-queryfunctioncontext-pageparam"><a class="header-anchor" href="#infinite-query-page-params-are-now-passed-via-queryfunctioncontext-pageparam" aria-hidden="true">#</a> Infinite Query Page params are now passed via <code>QueryFunctionContext.pageParam</code></h3><p>They were previously added as the last query key parameter in your query function, but this proved to be difficult for some patterns</p><div class="language-js"><pre><code><span class="token comment">// Old</span>\n<span class="token function">useInfiniteQuery</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;posts&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">_key<span class="token punctuation">,</span> pageParam <span class="token operator">=</span> <span class="token number">0</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">fetchPosts</span><span class="token punctuation">(</span>pageParam<span class="token punctuation">)</span><span class="token punctuation">)</span>\n\n<span class="token comment">// New</span>\n<span class="token function">useInfiniteQuery</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;posts&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> pageParam <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">fetchPost</span><span class="token punctuation">(</span>pageParam<span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre></div><h3 id="usepaginatedquery-has-been-deprecated-in-favor-of-the-keeppreviousdata-option"><a class="header-anchor" href="#usepaginatedquery-has-been-deprecated-in-favor-of-the-keeppreviousdata-option" aria-hidden="true">#</a> usePaginatedQuery() has been deprecated in favor of the <code>keepPreviousData</code> option</h3><p>The new <code>keepPreviousData</code> options is available for both <code>useQuery</code> and <code>useInfiniteQuery</code> and will have the same &quot;lagging&quot; effect on your data:</p><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> useQuery <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vu-query&#39;</span>\n\n<span class="token keyword">function</span> <span class="token function">Page</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> page <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token punctuation">{</span> data <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useQuery</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;page&#39;</span><span class="token punctuation">,</span> page<span class="token punctuation">]</span><span class="token punctuation">,</span> fetchPage<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n    keepPreviousData<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h3 id="useinfinitequery-is-now-bi-directional"><a class="header-anchor" href="#useinfinitequery-is-now-bi-directional" aria-hidden="true">#</a> useInfiniteQuery() is now bi-directional</h3><p>The <code>useInfiniteQuery()</code> interface has changed to fully support bi-directional infinite lists.</p><ul><li><code>options.getFetchMore</code> has been renamed to <code>options.getNextPageParam</code></li><li><code>queryResult.canFetchMore</code> has been renamed to <code>queryResult.hasNextPage</code></li><li><code>queryResult.fetchMore</code> has been renamed to <code>queryResult.fetchNextPage</code></li><li><code>queryResult.isFetchingMore</code> has been renamed to <code>queryResult.isFetchingNextPage</code></li><li>Added the <code>options.getPreviousPageParam</code> option</li><li>Added the <code>queryResult.hasPreviousPage</code> property</li><li>Added the <code>queryResult.fetchPreviousPage</code> property</li><li>Added the <code>queryResult.isFetchingPreviousPage</code></li><li>The <code>data</code> of an infinite query is now an object containing the <code>pages</code> and the <code>pageParams</code> used to fetch the pages: <code>{ pages: [data, data, data], pageParams: [...]}</code></li></ul><p>One direction:</p><div class="language-js"><pre><code><span class="token keyword">const</span> <span class="token punctuation">{</span>\n  data<span class="token punctuation">,</span>\n  fetchNextPage<span class="token punctuation">,</span>\n  hasNextPage<span class="token punctuation">,</span>\n  isFetchingNextPage<span class="token punctuation">,</span>\n<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useInfiniteQuery</span><span class="token punctuation">(</span>\n  <span class="token string">&#39;projects&#39;</span><span class="token punctuation">,</span>\n  <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> pageParam <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">fetchProjects</span><span class="token punctuation">(</span>pageParam<span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span>\n    <span class="token function-variable function">getNextPageParam</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">lastPage<span class="token punctuation">,</span> pages</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> lastPage<span class="token punctuation">.</span>nextCursor<span class="token punctuation">,</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">)</span>\n</code></pre></div><p>Both directions:</p><div class="language-js"><pre><code><span class="token keyword">const</span> <span class="token punctuation">{</span>\n  data<span class="token punctuation">,</span>\n  fetchNextPage<span class="token punctuation">,</span>\n  fetchPreviousPage<span class="token punctuation">,</span>\n  hasNextPage<span class="token punctuation">,</span>\n  hasPreviousPage<span class="token punctuation">,</span>\n  isFetchingNextPage<span class="token punctuation">,</span>\n  isFetchingPreviousPage<span class="token punctuation">,</span>\n<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useInfiniteQuery</span><span class="token punctuation">(</span>\n  <span class="token string">&#39;projects&#39;</span><span class="token punctuation">,</span>\n  <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> pageParam <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">fetchProjects</span><span class="token punctuation">(</span>pageParam<span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span>\n    <span class="token function-variable function">getNextPageParam</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">lastPage<span class="token punctuation">,</span> pages</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> lastPage<span class="token punctuation">.</span>nextCursor<span class="token punctuation">,</span>\n    <span class="token function-variable function">getPreviousPageParam</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">firstPage<span class="token punctuation">,</span> pages</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> firstPage<span class="token punctuation">.</span>prevCursor<span class="token punctuation">,</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">)</span>\n</code></pre></div><p>One direction reversed:</p><div class="language-js"><pre><code><span class="token keyword">const</span> <span class="token punctuation">{</span>\n  data<span class="token punctuation">,</span>\n  fetchNextPage<span class="token punctuation">,</span>\n  hasNextPage<span class="token punctuation">,</span>\n  isFetchingNextPage<span class="token punctuation">,</span>\n<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useInfiniteQuery</span><span class="token punctuation">(</span>\n  <span class="token string">&#39;projects&#39;</span><span class="token punctuation">,</span>\n  <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> pageParam <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">fetchProjects</span><span class="token punctuation">(</span>pageParam<span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span>\n    <span class="token function-variable function">select</span><span class="token operator">:</span> <span class="token parameter">data</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n      pages<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token operator">...</span>data<span class="token punctuation">.</span>pages<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      pageParams<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token operator">...</span>data<span class="token punctuation">.</span>pageParams<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token function-variable function">getNextPageParam</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">lastPage<span class="token punctuation">,</span> pages</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> lastPage<span class="token punctuation">.</span>nextCursor<span class="token punctuation">,</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">)</span>\n</code></pre></div><h3 id="infinite-query-data-now-contains-the-array-of-pages-and-pageparams-used-to-fetch-those-pages"><a class="header-anchor" href="#infinite-query-data-now-contains-the-array-of-pages-and-pageparams-used-to-fetch-those-pages" aria-hidden="true">#</a> Infinite Query data now contains the array of pages and pageParams used to fetch those pages.</h3><p>This allows for easier manipulation of the data and the page params, like, for example, removing the first page of data along with it&#39;s params:</p><div class="language-js"><pre><code>queryClient<span class="token punctuation">.</span><span class="token function">setQueryData</span><span class="token punctuation">(</span><span class="token string">&#39;projects&#39;</span><span class="token punctuation">,</span> <span class="token parameter">data</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n  pages<span class="token operator">:</span> data<span class="token punctuation">.</span>pages<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  pageParams<span class="token operator">:</span> data<span class="token punctuation">.</span>pageParams<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre></div><h3 id="usemutation-now-returns-an-object-instead-of-an-array"><a class="header-anchor" href="#usemutation-now-returns-an-object-instead-of-an-array" aria-hidden="true">#</a> useMutation now returns an object instead of an array</h3><p>Though the old way gave us warm fuzzy feelings of when we first discovered <code>useState</code> for the first time, they didn&#39;t last long. Now the mutation return is a single object.</p><div class="language-js"><pre><code><span class="token comment">// Old:</span>\n<span class="token keyword">const</span> <span class="token punctuation">[</span>mutate<span class="token punctuation">,</span> <span class="token punctuation">{</span> status<span class="token punctuation">,</span> reset <span class="token punctuation">}</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useMutation</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n<span class="token comment">// New:</span>\n<span class="token keyword">const</span> <span class="token punctuation">{</span> mutate<span class="token punctuation">,</span> status<span class="token punctuation">,</span> reset <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useMutation</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre></div><h3 id="mutation-mutate-no-longer-return-a-promise"><a class="header-anchor" href="#mutation-mutate-no-longer-return-a-promise" aria-hidden="true">#</a> <code>mutation.mutate</code> no longer return a promise</h3><ul><li>The <code>[mutate]</code> variable has been changed to the <code>mutation.mutate</code> function</li><li>Added the <code>mutation.mutateAsync</code> function</li></ul><p>We got a lot of questions regarding this behavior as users expected the promise to behave like a regular promise.</p><p>Because of this the <code>mutate</code> function is now split into a <code>mutate</code> and <code>mutateAsync</code> function.</p><p>The <code>mutate</code> function can be used when using callbacks:</p><div class="language-js"><pre><code><span class="token keyword">const</span> <span class="token punctuation">{</span> mutate <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useMutation</span><span class="token punctuation">(</span>addTodo<span class="token punctuation">)</span>\n\n<span class="token function">mutate</span><span class="token punctuation">(</span><span class="token string">&#39;todo&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  <span class="token function-variable function">onSuccess</span><span class="token operator">:</span> <span class="token parameter">data</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token function-variable function">onError</span><span class="token operator">:</span> <span class="token parameter">error</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token function-variable function">onSettled</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;settled&#39;</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><p>The <code>mutateAsync</code> function can be used when using async/await:</p><div class="language-js"><pre><code><span class="token keyword">const</span> <span class="token punctuation">{</span> mutateAsync <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useMutation</span><span class="token punctuation">(</span>addTodo<span class="token punctuation">)</span>\n\n<span class="token keyword">try</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">mutateAsync</span><span class="token punctuation">(</span><span class="token string">&#39;todo&#39;</span><span class="token punctuation">)</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>\n<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>\n<span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;settled&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h3 id="the-object-syntax-for-usequery-now-uses-a-collapsed-config"><a class="header-anchor" href="#the-object-syntax-for-usequery-now-uses-a-collapsed-config" aria-hidden="true">#</a> The object syntax for useQuery now uses a collapsed config:</h3><div class="language-js"><pre><code><span class="token comment">// Old:</span>\n<span class="token function">useQuery</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  queryKey<span class="token operator">:</span> <span class="token string">&#39;posts&#39;</span><span class="token punctuation">,</span>\n  queryFn<span class="token operator">:</span> fetchPosts<span class="token punctuation">,</span>\n  config<span class="token operator">:</span> <span class="token punctuation">{</span> staleTime<span class="token operator">:</span> <span class="token number">Infinity</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token comment">// New:</span>\n<span class="token function">useQuery</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  queryKey<span class="token operator">:</span> <span class="token string">&#39;posts&#39;</span><span class="token punctuation">,</span>\n  queryFn<span class="token operator">:</span> fetchPosts<span class="token punctuation">,</span>\n  staleTime<span class="token operator">:</span> <span class="token number">Infinity</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><h3 id="if-set-the-queryoptions-enabled-option-must-be-a-boolean-true-false"><a class="header-anchor" href="#if-set-the-queryoptions-enabled-option-must-be-a-boolean-true-false" aria-hidden="true">#</a> If set, the QueryOptions.enabled option must be a boolean (<code>true</code>/<code>false</code>)</h3><p>The <code>enabled</code> query option will now only disable a query when the value is <code>false</code>. If needed, values can be casted with <code>!!userId</code> or <code>Boolean(userId)</code> and a handy error will be thrown if a non-boolean value is passed.</p><h3 id="the-queryoptions-initialstale-option-has-been-removed"><a class="header-anchor" href="#the-queryoptions-initialstale-option-has-been-removed" aria-hidden="true">#</a> The QueryOptions.initialStale option has been removed</h3><p>The <code>initialStale</code> query option has been removed and initial data is now treated as regular data. Which means that if <code>initialData</code> is provided, the query will refetch on mount by default. If you do not want to refetch immediately, you can define a <code>staleTime</code>.</p><h3 id="the-queryoptions-forcefetchonmount-option-has-been-replaced-by-refetchonmount-always"><a class="header-anchor" href="#the-queryoptions-forcefetchonmount-option-has-been-replaced-by-refetchonmount-always" aria-hidden="true">#</a> The <code>QueryOptions.forceFetchOnMount</code> option has been replaced by <code>refetchOnMount: &#39;always&#39;</code></h3><p>Honestly, we were acruing way too many <code>refetchOn____</code> options, so this should clean things up.</p><h3 id="the-queryoptions-refetchonmount-options-now-only-applies-to-its-parent-component-instead-of-all-query-observers"><a class="header-anchor" href="#the-queryoptions-refetchonmount-options-now-only-applies-to-its-parent-component-instead-of-all-query-observers" aria-hidden="true">#</a> The <code>QueryOptions.refetchOnMount</code> options now only applies to its parent component instead of all query observers</h3><p>When <code>refetchOnMount</code> was set to <code>false</code> any additional components were prevented from refetching on mount. In version 3 only the component where the option has been set will not refetch on mount.</p><h3 id="the-queryoptions-queryfnparamsfilter-has-been-removed-in-favor-of-the-new-queryfunctioncontext-object"><a class="header-anchor" href="#the-queryoptions-queryfnparamsfilter-has-been-removed-in-favor-of-the-new-queryfunctioncontext-object" aria-hidden="true">#</a> The <code>QueryOptions.queryFnParamsFilter</code> has been removed in favor of the new <code>QueryFunctionContext</code> object.</h3><p>The <code>queryFnParamsFilter</code> option has been removed because query functions now get a <code>QueryFunctionContext</code> object instead of the query key.</p><p>Parameters can still be filtered within the query function itself as the <code>QueryFunctionContext</code> also contains the query key.</p><h3 id="the-queryoptions-notifyonstatuschange-option-has-been-superceded-by-the-new-notifyonchangeprops-and-notifyonchangepropsexclusions-options"><a class="header-anchor" href="#the-queryoptions-notifyonstatuschange-option-has-been-superceded-by-the-new-notifyonchangeprops-and-notifyonchangepropsexclusions-options" aria-hidden="true">#</a> The <code>QueryOptions.notifyOnStatusChange</code> option has been superceded by the new <code>notifyonChangeProps</code> and <code>notifyOnChangePropsExclusions</code> options.</h3><p>With these new options it is possible to configure when a component should re-render on a granular level.</p><p>Only re-render when the <code>data</code> or <code>error</code> properties change:</p><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> useQuery <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vu-query&#39;</span>\n\n<span class="token keyword">function</span> <span class="token function">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token punctuation">{</span> data <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useQuery</span><span class="token punctuation">(</span><span class="token string">&#39;user&#39;</span><span class="token punctuation">,</span> fetchUser<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n    notifyOnChangeProps<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;data&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;error&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token keyword">return</span> <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>Username<span class="token operator">:</span> <span class="token punctuation">{</span>data<span class="token punctuation">.</span>username<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>Prevent re-render when the <code>isStale</code> property changes:</p><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> useQuery <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vu-query&#39;</span>\n\n<span class="token keyword">function</span> <span class="token function">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token punctuation">{</span> data <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useQuery</span><span class="token punctuation">(</span><span class="token string">&#39;user&#39;</span><span class="token punctuation">,</span> fetchUser<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n    notifyOnChangePropsExclusions<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;isStale&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token keyword">return</span> <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>Username<span class="token operator">:</span> <span class="token punctuation">{</span>data<span class="token punctuation">.</span>username<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h3 id="the-queryresult-clear-function-has-been-renamed-to-queryresult-remove"><a class="header-anchor" href="#the-queryresult-clear-function-has-been-renamed-to-queryresult-remove" aria-hidden="true">#</a> The <code>QueryResult.clear()</code> function has been renamed to <code>QueryResult.remove()</code></h3><p>Although it was called <code>clear</code>, it really just removed the query from the cache. The name now matches the functionality.</p><h3 id="the-queryresult-updatedat-property-has-been-split-into-queryresult-dataupdatedat-and-queryresult-errorupdatedat-properties"><a class="header-anchor" href="#the-queryresult-updatedat-property-has-been-split-into-queryresult-dataupdatedat-and-queryresult-errorupdatedat-properties" aria-hidden="true">#</a> The <code>QueryResult.updatedAt</code> property has been split into <code>QueryResult.dataUpdatedAt</code> and <code>QueryResult.errorUpdatedAt</code> properties</h3><p>Because data and errors can be present at the same time, the <code>updatedAt</code> property has been split into <code>dataUpdatedAt</code> and <code>errorUpdatedAt</code>.</p><h3 id="setconsole-has-been-replaced-by-the-new-setlogger-function"><a class="header-anchor" href="#setconsole-has-been-replaced-by-the-new-setlogger-function" aria-hidden="true">#</a> <code>setConsole()</code> has been replaced by the new <code>setLogger()</code> function</h3><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> setLogger <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vu-query&#39;</span>\n\n<span class="token comment">// Log with Sentry</span>\n<span class="token function">setLogger</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token function-variable function">error</span><span class="token operator">:</span> <span class="token parameter">error</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    Sentry<span class="token punctuation">.</span><span class="token function">captureException</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token comment">// Log with Winston</span>\n<span class="token function">setLogger</span><span class="token punctuation">(</span>winston<span class="token punctuation">.</span><span class="token function">createLogger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre></div><h3 id="react-native-no-longer-requires-overriding-the-logger"><a class="header-anchor" href="#react-native-no-longer-requires-overriding-the-logger" aria-hidden="true">#</a> React Native no longer requires overriding the logger</h3><p>To prevent showing error screens in React Native when a query fails it was necessary to manually change the Console:</p><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> setConsole <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vu-query&#39;</span>\n\n<span class="token function">setConsole</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  log<span class="token operator">:</span> console<span class="token punctuation">.</span>log<span class="token punctuation">,</span>\n  warn<span class="token operator">:</span> console<span class="token punctuation">.</span>warn<span class="token punctuation">,</span>\n  error<span class="token operator">:</span> console<span class="token punctuation">.</span>warn<span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><p>In version 3 <strong>this is done automatically when Vu Query is used in React Native</strong>.</p><h2 id="new-features"><a class="header-anchor" href="#new-features" aria-hidden="true">#</a> New features</h2><h4 id="query-data-selectors"><a class="header-anchor" href="#query-data-selectors" aria-hidden="true">#</a> Query Data Selectors</h4><p>The <code>useQuery</code> and <code>useInfiniteQuery</code> hooks now have a <code>select</code> option to select or transform parts of the query result.</p><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> useQuery <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vu-query&#39;</span>\n\n<span class="token keyword">function</span> <span class="token function">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token punctuation">{</span> data <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useQuery</span><span class="token punctuation">(</span><span class="token string">&#39;user&#39;</span><span class="token punctuation">,</span> fetchUser<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n    <span class="token function-variable function">select</span><span class="token operator">:</span> <span class="token parameter">user</span> <span class="token operator">=&gt;</span> user<span class="token punctuation">.</span>username<span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token keyword">return</span> <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>Username<span class="token operator">:</span> <span class="token punctuation">{</span>data<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>Set the <code>notifyOnChangeProps</code> option to <code>[&#39;data&#39;, &#39;error&#39;]</code> to only re-render when the selected data changes.</p><h4 id="the-usequeries-hook-for-variable-length-parallel-query-execution"><a class="header-anchor" href="#the-usequeries-hook-for-variable-length-parallel-query-execution" aria-hidden="true">#</a> The useQueries() hook, for variable-length parallel query execution</h4><p>Wish you could run <code>useQuery</code> in a loop? The rules of hooks say no, but with the new <code>useQueries()</code> hook, you can!</p><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> useQueries <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vu-query&#39;</span>\n\n<span class="token keyword">function</span> <span class="token function">Overview</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> results <span class="token operator">=</span> <span class="token function">useQueries</span><span class="token punctuation">(</span><span class="token punctuation">[</span>\n    <span class="token punctuation">{</span> queryKey<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;post&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> queryFn<span class="token operator">:</span> fetchPost <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">{</span> queryKey<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;post&#39;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> queryFn<span class="token operator">:</span> fetchPost <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">)</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token operator">&lt;</span>ul<span class="token operator">&gt;</span>\n      <span class="token punctuation">{</span>results<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> data <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> data <span class="token operator">&amp;&amp;</span> <span class="token operator">&lt;</span>li key<span class="token operator">=</span><span class="token punctuation">{</span>data<span class="token punctuation">.</span>id<span class="token punctuation">}</span><span class="token operator">&gt;</span><span class="token punctuation">{</span>data<span class="token punctuation">.</span>title<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token punctuation">}</span>\n    <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">&gt;</span>\n  <span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h4 id="retry-offline-mutations"><a class="header-anchor" href="#retry-offline-mutations" aria-hidden="true">#</a> Retry/offline mutations</h4><p>By default Vu Query will not retry a mutation on error, but it is possible with the <code>retry</code> option:</p><div class="language-js"><pre><code><span class="token keyword">const</span> mutation <span class="token operator">=</span> <span class="token function">useMutation</span><span class="token punctuation">(</span>addTodo<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  retry<span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><p>If mutations fail because the device is offline, they will be retried in the same order when the device reconnects.</p><h4 id="persist-mutations"><a class="header-anchor" href="#persist-mutations" aria-hidden="true">#</a> Persist mutations</h4><p>Mutations can now be persisted to storage and resumed at a later point. More information can be found in the mutations documentation.</p><h4 id="queryobserver"><a class="header-anchor" href="#queryobserver" aria-hidden="true">#</a> QueryObserver</h4><p>A <code>QueryObserver</code> can be used to create and/or watch a query:</p><div class="language-js"><pre><code><span class="token keyword">const</span> observer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryObserver</span><span class="token punctuation">(</span>queryClient<span class="token punctuation">,</span> <span class="token punctuation">{</span> queryKey<span class="token operator">:</span> <span class="token string">&#39;posts&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token keyword">const</span> unsubscribe <span class="token operator">=</span> observer<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token parameter">result</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>\n  <span class="token function">unsubscribe</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><h4 id="infinitequeryobserver"><a class="header-anchor" href="#infinitequeryobserver" aria-hidden="true">#</a> InfiniteQueryObserver</h4><p>A <code>InfiniteQueryObserver</code> can be used to create and/or watch an infinite query:</p><div class="language-js"><pre><code><span class="token keyword">const</span> observer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InfiniteQueryObserver</span><span class="token punctuation">(</span>queryClient<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  queryKey<span class="token operator">:</span> <span class="token string">&#39;posts&#39;</span><span class="token punctuation">,</span>\n  queryFn<span class="token operator">:</span> fetchPosts<span class="token punctuation">,</span>\n  <span class="token function-variable function">getNextPageParam</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">lastPage<span class="token punctuation">,</span> allPages</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> lastPage<span class="token punctuation">.</span>nextCursor<span class="token punctuation">,</span>\n  <span class="token function-variable function">getPreviousPageParam</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">firstPage<span class="token punctuation">,</span> allPages</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> firstPage<span class="token punctuation">.</span>prevCursor<span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token keyword">const</span> unsubscribe <span class="token operator">=</span> observer<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token parameter">result</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>\n  <span class="token function">unsubscribe</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><h4 id="queriesobserver"><a class="header-anchor" href="#queriesobserver" aria-hidden="true">#</a> QueriesObserver</h4><p>A <code>QueriesObserver</code> can be used to create and/or watch multiple queries:</p><div class="language-js"><pre><code><span class="token keyword">const</span> observer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueriesObserver</span><span class="token punctuation">(</span>queryClient<span class="token punctuation">,</span> <span class="token punctuation">[</span>\n  <span class="token punctuation">{</span> queryKey<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;post&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> queryFn<span class="token operator">:</span> fetchPost <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span> queryKey<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;post&#39;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> queryFn<span class="token operator">:</span> fetchPost <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">]</span><span class="token punctuation">)</span>\n\n<span class="token keyword">const</span> unsubscribe <span class="token operator">=</span> observer<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token parameter">result</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>\n  <span class="token function">unsubscribe</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><h4 id="set-default-options-for-specific-queries"><a class="header-anchor" href="#set-default-options-for-specific-queries" aria-hidden="true">#</a> Set default options for specific queries</h4><p>The <code>QueryClient.setQueryDefaults()</code> method can be used to set default options for specific queries:</p><div class="language-js"><pre><code>queryClient<span class="token punctuation">.</span><span class="token function">setQueryDefaults</span><span class="token punctuation">(</span><span class="token string">&#39;posts&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> queryFn<span class="token operator">:</span> fetchPosts <span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token keyword">function</span> <span class="token function">Component</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token punctuation">{</span> data <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useQuery</span><span class="token punctuation">(</span><span class="token string">&#39;posts&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h4 id="set-default-options-for-specific-mutations"><a class="header-anchor" href="#set-default-options-for-specific-mutations" aria-hidden="true">#</a> Set default options for specific mutations</h4><p>The <code>QueryClient.setMutationDefaults()</code> method can be used to set default options for specific mutations:</p><div class="language-js"><pre><code>queryClient<span class="token punctuation">.</span><span class="token function">setMutationDefaults</span><span class="token punctuation">(</span><span class="token string">&#39;addPost&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> mutationFn<span class="token operator">:</span> addPost <span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token keyword">function</span> <span class="token function">Component</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token punctuation">{</span> mutate <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useMutation</span><span class="token punctuation">(</span><span class="token string">&#39;addPost&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h4 id="useisfetching"><a class="header-anchor" href="#useisfetching" aria-hidden="true">#</a> useIsFetching()</h4><p>The <code>useIsFetching()</code> hook now accepts filters which can be used to for example only show a spinner for certain type of queries:</p><div class="language-js"><pre><code><span class="token keyword">const</span> fetches <span class="token operator">=</span> <span class="token function">useIsFetching</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;posts&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n</code></pre></div><h4 id="core-separation"><a class="header-anchor" href="#core-separation" aria-hidden="true">#</a> Core separation</h4><p>The core of Vu Query is now fully separated from React, which means it can also be used standalone or in other frameworks. Use the <code>vu-query/core</code> entrypoint to only import the core functionality:</p><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> QueryClient <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vu-query/core&#39;</span>\n</code></pre></div><h3 id="devtools-are-now-part-of-the-main-repo-and-npm-package"><a class="header-anchor" href="#devtools-are-now-part-of-the-main-repo-and-npm-package" aria-hidden="true">#</a> Devtools are now part of the main repo and npm package</h3><p>The devtools are now included in the <code>vu-query</code> package itself under the import <code>vu-query/devtools</code>. Simply replace <code>vu-query-devtools</code> imports with <code>vu-query/devtools</code></p>',133);t.render=function(s,e,t,p,c,u){return n(),a("div",null,[o])};export default t;export{e as __pageData};
