import{l as e,f as n,G as t}from"./framework.dc3bd9a4.js";const a='{"title":"QueryClient","description":"","frontmatter":{"id":"QueryClient","title":"QueryClient"},"headers":[{"level":2,"title":"QueryClient","slug":"queryclient"},{"level":2,"title":"queryClient.fetchQuery","slug":"queryclient-fetchquery"},{"level":2,"title":"queryClient.fetchInfiniteQuery","slug":"queryclient-fetchinfinitequery"},{"level":2,"title":"queryClient.prefetchQuery","slug":"queryclient-prefetchquery"},{"level":2,"title":"queryClient.prefetchInfiniteQuery","slug":"queryclient-prefetchinfinitequery"},{"level":2,"title":"queryClient.getQueryData","slug":"queryclient-getquerydata"},{"level":2,"title":"queryClient.setQueryData","slug":"queryclient-setquerydata"},{"level":2,"title":"queryClient.getQueryState","slug":"queryclient-getquerystate"},{"level":2,"title":"queryClient.invalidateQueries","slug":"queryclient-invalidatequeries"},{"level":2,"title":"queryClient.refetchQueries","slug":"queryclient-refetchqueries"},{"level":2,"title":"queryClient.cancelQueries","slug":"queryclient-cancelqueries"},{"level":2,"title":"queryClient.removeQueries","slug":"queryclient-removequeries"},{"level":2,"title":"queryClient.resetQueries","slug":"queryclient-resetqueries"},{"level":2,"title":"queryClient.isFetching","slug":"queryclient-isfetching"},{"level":2,"title":"queryClient.getDefaultOptions","slug":"queryclient-getdefaultoptions"},{"level":2,"title":"queryClient.setDefaultOptions","slug":"queryclient-setdefaultoptions"},{"level":2,"title":"queryClient.getQueryDefaults","slug":"queryclient-getquerydefaults"},{"level":2,"title":"queryClient.setQueryDefaults","slug":"queryclient-setquerydefaults"},{"level":2,"title":"queryClient.getMutationDefaults","slug":"queryclient-getmutationdefaults"},{"level":2,"title":"queryClient.setMutationDefaults","slug":"queryclient-setmutationdefaults"},{"level":2,"title":"queryClient.getQueryCache","slug":"queryclient-getquerycache"},{"level":2,"title":"queryClient.getMutationCache","slug":"queryclient-getmutationcache"},{"level":2,"title":"queryClient.clear","slug":"queryclient-clear"}],"relativePath":"reference/QueryClient.md","lastUpdated":1610424254064}',s={},o=t('<h2 id="queryclient"><a class="header-anchor" href="#queryclient" aria-hidden="true">#</a> <code>QueryClient</code></h2><p>The <code>QueryClient</code> can be used to interact with a cache:</p><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> QueryClient <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;usequery&#39;</span>\n\n<span class="token keyword">const</span> queryClient <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryClient</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  defaultOptions<span class="token operator">:</span> <span class="token punctuation">{</span>\n    queries<span class="token operator">:</span> <span class="token punctuation">{</span>\n      staleTime<span class="token operator">:</span> <span class="token number">Infinity</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token keyword">await</span> queryClient<span class="token punctuation">.</span><span class="token function">prefetchQuery</span><span class="token punctuation">(</span><span class="token string">&#39;posts&#39;</span><span class="token punctuation">,</span> fetchPosts<span class="token punctuation">)</span>\n</code></pre></div><p>Its available methods are:</p><ul><li><a href="#queryclientfetchquery"><code>fetchQuery</code></a></li><li><a href="#queryclientfetchinfinitequery"><code>fetchInfiniteQuery</code></a></li><li><a href="#queryclientprefetchquery"><code>prefetchQuery</code></a></li><li><a href="#queryclientprefetchinfinitequery"><code>prefetchInfiniteQuery</code></a></li><li><a href="#queryclientgetquerydata"><code>getQueryData</code></a></li><li><a href="#queryclientsetquerydata"><code>setQueryData</code></a></li><li><a href="#queryclientgetquerystate"><code>getQueryState</code></a></li><li><a href="#queryclientinvalidatequeries"><code>invalidateQueries</code></a></li><li><a href="#queryclientrefetchqueries"><code>refetchQueries</code></a></li><li><a href="#queryclientcancelqueries"><code>cancelQueries</code></a></li><li><a href="#queryclientremovequeries"><code>removeQueries</code></a></li><li><a href="#queryclientresetqueries"><code>resetQueries</code></a></li><li><a href="#queryclientisfetching"><code>isFetching</code></a></li><li><a href="#queryclientsetdefaultoptions"><code>getDefaultOptions</code></a></li><li><a href="#queryclientgetdefaultoptions"><code>setDefaultOptions</code></a></li><li><a href="#queryclientgetquerydefaults"><code>getQueryDefaults</code></a></li><li><a href="#queryclientsetquerydefaults"><code>setQueryDefaults</code></a></li><li><a href="#queryclientgetmutationdefaults"><code>getMutationDefaults</code></a></li><li><a href="#queryclientsetmutationdefaults"><code>setMutationDefaults</code></a></li><li><a href="#queryclientgetquerycache"><code>getQueryCache</code></a></li><li><a href="#queryclientgetmutationcache"><code>getMutationCache</code></a></li><li><a href="#queryclientclear"><code>clear</code></a></li></ul><p><strong>Options</strong></p><ul><li><code>queryCache?: QueryCache</code><ul><li>Optional</li><li>The query cache this client is connected to.</li></ul></li><li><code>mutationCache?: MutationCache</code><ul><li>Optional</li><li>The mutation cache this client is connected to.</li></ul></li><li><code>defaultOptions?: DefaultOptions</code><ul><li>Optional</li><li>Define defaults for all queries and mutations using this queryClient.</li></ul></li></ul><h2 id="queryclient-fetchquery"><a class="header-anchor" href="#queryclient-fetchquery" aria-hidden="true">#</a> <code>queryClient.fetchQuery</code></h2><p><code>fetchQuery</code> is an asynchronous method that can be used to fetch and cache a query. It will either resolve with the data or throw with the error. Use the <code>prefetchQuery</code> method if you just want to fetch a query without needing the result.</p><p>If the query exists and the data is not invalidated or older than the given <code>staleTime</code>, then the data from the cache will be returned. Otherwise it will try to fetch the latest data.</p><blockquote><p>The difference between using <code>fetchQuery</code> and <code>setQueryData</code> is that <code>fetchQuery</code> is async and will ensure that duplicate requests for this query are not created with <code>useQuery</code> instances for the same query are rendered while the data is fetching.</p></blockquote><div class="language-js"><pre><code><span class="token keyword">try</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token keyword">await</span> queryClient<span class="token punctuation">.</span><span class="token function">fetchQuery</span><span class="token punctuation">(</span>queryKey<span class="token punctuation">,</span> queryFn<span class="token punctuation">)</span>\n<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>Specify a <code>staleTime</code> to only fetch when the data is older than a certain amount of time:</p><div class="language-js"><pre><code><span class="token keyword">try</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token keyword">await</span> queryClient<span class="token punctuation">.</span><span class="token function">fetchQuery</span><span class="token punctuation">(</span>queryKey<span class="token punctuation">,</span> queryFn<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n    staleTime<span class="token operator">:</span> <span class="token number">10000</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p><strong>Options</strong></p><p>The options for <code>fetchQuery</code> are exactly the same as those of <a href="#usequery"><code>useQuery</code></a>.</p><p><strong>Returns</strong></p><ul><li><code>Promise&lt;TData&gt;</code></li></ul><h2 id="queryclient-fetchinfinitequery"><a class="header-anchor" href="#queryclient-fetchinfinitequery" aria-hidden="true">#</a> <code>queryClient.fetchInfiniteQuery</code></h2><p><code>fetchInfiniteQuery</code> is similar to <code>fetchQuery</code> but can be used to fetch and cache an infinite query.</p><div class="language-js"><pre><code><span class="token keyword">try</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token keyword">await</span> queryClient<span class="token punctuation">.</span><span class="token function">fetchInfiniteQuery</span><span class="token punctuation">(</span>queryKey<span class="token punctuation">,</span> queryFn<span class="token punctuation">)</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>pages<span class="token punctuation">)</span>\n<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p><strong>Options</strong></p><p>The options for <code>fetchInfiniteQuery</code> are exactly the same as those of <a href="#useinfinitequery"><code>useInfiniteQuery</code></a>.</p><p><strong>Returns</strong></p><ul><li><code>Promise&lt;InfiniteData&lt;TData&gt;&gt;</code></li></ul><h2 id="queryclient-prefetchquery"><a class="header-anchor" href="#queryclient-prefetchquery" aria-hidden="true">#</a> <code>queryClient.prefetchQuery</code></h2><p><code>prefetchQuery</code> is an asynchronous method that can be used to prefetch a query before it is needed or rendered with <code>useQuery</code> and friends. The method works the same as <code>fetchQuery</code> except that is will not throw or return any data.</p><div class="language-js"><pre><code><span class="token keyword">await</span> queryClient<span class="token punctuation">.</span><span class="token function">prefetchQuery</span><span class="token punctuation">(</span>queryKey<span class="token punctuation">,</span> queryFn<span class="token punctuation">)</span>\n</code></pre></div><p>You can even use it with a default queryFn in your config!</p><div class="language-js"><pre><code><span class="token keyword">await</span> queryClient<span class="token punctuation">.</span><span class="token function">prefetchQuery</span><span class="token punctuation">(</span>queryKey<span class="token punctuation">)</span>\n</code></pre></div><p><strong>Options</strong></p><p>The options for <code>prefetchQuery</code> are exactly the same as those of <a href="#usequery"><code>useQuery</code></a>.</p><p><strong>Returns</strong></p><ul><li><code>Promise&lt;void&gt;</code><ul><li>A promise is returned that will either immediately resolve if no fetch is needed or after the query has been executed. It will not return any data or throw any errors.</li></ul></li></ul><h2 id="queryclient-prefetchinfinitequery"><a class="header-anchor" href="#queryclient-prefetchinfinitequery" aria-hidden="true">#</a> <code>queryClient.prefetchInfiniteQuery</code></h2><p><code>prefetchInfiniteQuery</code> is similar to <code>prefetchQuery</code> but can be used to prefetch and cache an infinite query.</p><div class="language-js"><pre><code><span class="token keyword">await</span> queryClient<span class="token punctuation">.</span><span class="token function">prefetchInfiniteQuery</span><span class="token punctuation">(</span>queryKey<span class="token punctuation">,</span> queryFn<span class="token punctuation">)</span>\n</code></pre></div><p><strong>Options</strong></p><p>The options for <code>prefetchInfiniteQuery</code> are exactly the same as those of <a href="#useinfinitequery"><code>useInfiniteQuery</code></a>.</p><p><strong>Returns</strong></p><ul><li><code>Promise&lt;void&gt;</code><ul><li>A promise is returned that will either immediately resolve if no fetch is needed or after the query has been executed. It will not return any data or throw any errors.</li></ul></li></ul><h2 id="queryclient-getquerydata"><a class="header-anchor" href="#queryclient-getquerydata" aria-hidden="true">#</a> <code>queryClient.getQueryData</code></h2><p><code>getQueryData</code> is a synchronous function that can be used to get an existing query&#39;s cached data. If the query does not exist, <code>undefined</code> will be returned.</p><div class="language-js"><pre><code><span class="token keyword">const</span> data <span class="token operator">=</span> queryClient<span class="token punctuation">.</span><span class="token function">getQueryData</span><span class="token punctuation">(</span>queryKey<span class="token punctuation">)</span>\n</code></pre></div><p><strong>Options</strong></p><ul><li><code>queryKey?: QueryKey</code>: <a href="./../guides/query-keys.html">Query Keys</a></li><li><code>filters?: QueryFilters</code>: <a href="./../guides/query-filters.html">Query Filters</a></li></ul><p><strong>Returns</strong></p><ul><li><code>data: TData | undefined</code><ul><li>The data for the cached query, or <code>undefined</code> if the query does not exist.</li></ul></li></ul><h2 id="queryclient-setquerydata"><a class="header-anchor" href="#queryclient-setquerydata" aria-hidden="true">#</a> <code>queryClient.setQueryData</code></h2><p><code>setQueryData</code> is a synchronous function that can be used to immediately update a query&#39;s cached data. If the query does not exist, it will be created. <strong>If the query is not utilized by a query hook in the default <code>cacheTime</code> of 5 minutes, the query will be garbage collected</strong>.</p><blockquote><p>The difference between using <code>setQueryData</code> and <code>fetchQuery</code> is that <code>setQueryData</code> is sync and assumes that you already synchronously have the data available. If you need to fetch the data asynchronously, it&#39;s suggested that you either refetch the query key or use <code>fetchQuery</code> to handle the asynchronous fetch.</p></blockquote><div class="language-js"><pre><code>queryClient<span class="token punctuation">.</span><span class="token function">setQueryData</span><span class="token punctuation">(</span>queryKey<span class="token punctuation">,</span> updater<span class="token punctuation">)</span>\n</code></pre></div><p><strong>Options</strong></p><ul><li><code>queryKey: QueryKey</code> <a href="./guides/query-keys.html">Query Keys</a></li><li><code>updater: unknown | (oldData: TData | undefined) =&gt; TData</code><ul><li>If non-function is passed, the data will be updated to this value</li><li>If a function is passed, it will receive the old data value and be expected to return a new one.</li></ul></li></ul><p><strong>Using an updater value</strong></p><div class="language-js"><pre><code><span class="token function">setQueryData</span><span class="token punctuation">(</span>queryKey<span class="token punctuation">,</span> newData<span class="token punctuation">)</span>\n</code></pre></div><p><strong>Using an updater function</strong></p><p>For convenience in syntax, you can also pass an updater function which receives the current data value and returns the new one:</p><div class="language-js"><pre><code><span class="token function">setQueryData</span><span class="token punctuation">(</span>queryKey<span class="token punctuation">,</span> <span class="token parameter">oldData</span> <span class="token operator">=&gt;</span> newData<span class="token punctuation">)</span>\n</code></pre></div><h2 id="queryclient-getquerystate"><a class="header-anchor" href="#queryclient-getquerystate" aria-hidden="true">#</a> <code>queryClient.getQueryState</code></h2><p><code>getQueryState</code> is a synchronous function that can be used to get an existing query&#39;s state. If the query does not exist, <code>undefined</code> will be returned.</p><div class="language-js"><pre><code><span class="token keyword">const</span> state <span class="token operator">=</span> queryClient<span class="token punctuation">.</span><span class="token function">getQueryState</span><span class="token punctuation">(</span>queryKey<span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>state<span class="token punctuation">.</span>dataUpdatedAt<span class="token punctuation">)</span>\n</code></pre></div><p><strong>Options</strong></p><ul><li><code>queryKey?: QueryKey</code>: <a href="./../guides/query-keys.html">Query Keys</a></li><li><code>filters?: QueryFilters</code>: <a href="./../guides/query-filters.html">Query Filters</a></li></ul><h2 id="queryclient-invalidatequeries"><a class="header-anchor" href="#queryclient-invalidatequeries" aria-hidden="true">#</a> <code>queryClient.invalidateQueries</code></h2><p>The <code>invalidateQueries</code> method can be used to invalidate and refetch single or multiple queries in the cache based on their query keys or any other functionally accessible property/state of the query. By default, all matching queries are immediately marked as invalid and active queries are refetched in the background.</p><ul><li>If you <strong>do not want active queries to refetch</strong>, and simply be marked as invalid, you can use the <code>refetchActive: false</code> option.</li><li>If you <strong>want inactive queries to refetch</strong> as well, use the <code>refetchInactive: true</code> option</li></ul><div class="language-js"><pre><code><span class="token keyword">await</span> queryClient<span class="token punctuation">.</span><span class="token function">invalidateQueries</span><span class="token punctuation">(</span><span class="token string">&#39;posts&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  exact<span class="token punctuation">,</span>\n  refetchActive <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  refetchInactive <span class="token operator">=</span> <span class="token boolean">false</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> throwOnError <span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><p><strong>Options</strong></p><ul><li><code>queryKey?: QueryKey</code>: <a href="./../guides/query-keys.html">Query Keys</a></li><li><code>filters?: QueryFilters</code>: <a href="./../guides/query-filters.html">Query Filters</a><ul><li><code>refetchActive: Boolean</code><ul><li>Defaults to <code>true</code></li><li>When set to <code>false</code>, queries that match the refetch predicate and are actively being rendered via <code>useQuery</code> and friends will NOT be refetched in the background, and only marked as invalid.</li></ul></li><li><code>refetchInactive: Boolean</code><ul><li>Defaults to <code>false</code></li><li>When set to <code>true</code>, queries that match the refetch predicate and are not being rendered via <code>useQuery</code> and friends will be both marked as invalid and also refetched in the background</li></ul></li></ul></li><li><code>refetchOptions?: RefetchOptions</code>: <ul><li><code>throwOnError?: boolean</code><ul><li>When set to <code>true</code>, this method will throw if any of the query refetch tasks fail.</li></ul></li></ul></li></ul><h2 id="queryclient-refetchqueries"><a class="header-anchor" href="#queryclient-refetchqueries" aria-hidden="true">#</a> <code>queryClient.refetchQueries</code></h2><p>The <code>refetchQueries</code> method can be used to refetch queries based on certain conditions.</p><p>Examples:</p><div class="language-js"><pre><code><span class="token comment">// refetch all queries:</span>\n<span class="token keyword">await</span> queryClient<span class="token punctuation">.</span><span class="token function">refetchQueries</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n<span class="token comment">// refetch all stale queries:</span>\n<span class="token keyword">await</span> queryClient<span class="token punctuation">.</span><span class="token function">refetchQueries</span><span class="token punctuation">(</span><span class="token punctuation">{</span> stale<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token comment">// refetch all active queries partially matching a query key:</span>\n<span class="token keyword">await</span> queryClient<span class="token punctuation">.</span><span class="token function">refetchQueries</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;posts&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> active<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token comment">// refetch all active queries exactly matching a query key:</span>\n<span class="token keyword">await</span> queryClient<span class="token punctuation">.</span><span class="token function">refetchQueries</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;posts&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> active<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> exact<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><p><strong>Options</strong></p><ul><li><code>queryKey?: QueryKey</code>: <a href="./../guides/query-keys.html">Query Keys</a></li><li><code>filters?: QueryFilters</code>: <a href="./../guides/query-filters.html">Query Filters</a></li><li><code>refetchOptions?: RefetchOptions</code>: <ul><li><code>throwOnError?: boolean</code><ul><li>When set to <code>true</code>, this method will throw if any of the query refetch tasks fail.</li></ul></li></ul></li></ul><p><strong>Returns</strong></p><p>This function returns a promise that will resolve when all of the queries are done being refetched. By default, it <strong>will not</strong> throw an error if any of those queries refetches fail, but this can be configured by setting the <code>throwOnError</code> option to <code>true</code></p><h2 id="queryclient-cancelqueries"><a class="header-anchor" href="#queryclient-cancelqueries" aria-hidden="true">#</a> <code>queryClient.cancelQueries</code></h2><p>The <code>cancelQueries</code> method can be used to cancel outgoing queries based on their query keys or any other functionally accessible property/state of the query.</p><p>This is most useful when performing optimistic updates since you will likely need to cancel any outgoing query refetches so they don&#39;t clobber your optimistic update when they resolve.</p><div class="language-js"><pre><code><span class="token keyword">await</span> queryClient<span class="token punctuation">.</span><span class="token function">cancelQueries</span><span class="token punctuation">(</span><span class="token string">&#39;posts&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> exact<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><p><strong>Options</strong></p><ul><li><code>queryKey?: QueryKey</code>: <a href="./../guides/query-keys.html">Query Keys</a></li><li><code>filters?: QueryFilters</code>: <a href="./../guides/query-filters.html">Query Filters</a></li></ul><p><strong>Returns</strong></p><p>This method does not return anything</p><h2 id="queryclient-removequeries"><a class="header-anchor" href="#queryclient-removequeries" aria-hidden="true">#</a> <code>queryClient.removeQueries</code></h2><p>The <code>removeQueries</code> method can be used to remove queries from the cache based on their query keys or any other functionally accessible property/state of the query.</p><div class="language-js"><pre><code>queryClient<span class="token punctuation">.</span><span class="token function">removeQueries</span><span class="token punctuation">(</span>queryKey<span class="token punctuation">,</span> <span class="token punctuation">{</span> exact<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><p><strong>Options</strong></p><ul><li><code>queryKey?: QueryKey</code>: <a href="./../guides/query-keys.html">Query Keys</a></li><li><code>filters?: QueryFilters</code>: <a href="./../guides/query-filters.html">Query Filters</a></li></ul><p><strong>Returns</strong></p><p>This method does not return anything</p><h2 id="queryclient-resetqueries"><a class="header-anchor" href="#queryclient-resetqueries" aria-hidden="true">#</a> <code>queryClient.resetQueries</code></h2><p>The <code>resetQueries</code> method can be used to reset queries in the cache to their initial state based on their query keys or any other functionally accessible property/state of the query.</p><p>This will notify subscribers — unlike <code>clear</code>, which removes all subscribers — and reset the query to its pre-loaded state — unlike <code>invalidateQueries</code>. If a query has <code>initialData</code>, the query&#39;s data will be reset to that. If a query is active, it will be refetched.</p><div class="language-js"><pre><code>queryClient<span class="token punctuation">.</span><span class="token function">resetQueries</span><span class="token punctuation">(</span>queryKey<span class="token punctuation">,</span> <span class="token punctuation">{</span> exact<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><p><strong>Options</strong></p><ul><li><code>queryKey?: QueryKey</code>: <a href="./../guides/query-keys.html">Query Keys</a></li><li><code>filters?: QueryFilters</code>: <a href="./../guides/query-filters.html">Query Filters</a></li><li><code>resetOptions?: ResetOptions</code>: <ul><li><code>throwOnError?: boolean</code><ul><li>When set to <code>true</code>, this method will throw if any of the query refetch tasks fail.</li></ul></li></ul></li></ul><p><strong>Returns</strong></p><p>This method returns a promise that resolves when all active queries have been refetched.</p><h2 id="queryclient-isfetching"><a class="header-anchor" href="#queryclient-isfetching" aria-hidden="true">#</a> <code>queryClient.isFetching</code></h2><p>This <code>isFetching</code> method returns an <code>integer</code> representing how many queries, if any, in the cache are currently fetching (including background-fetching, loading new pages, or loading more infinite query results)</p><div class="language-js"><pre><code><span class="token keyword">if</span> <span class="token punctuation">(</span>queryClient<span class="token punctuation">.</span><span class="token function">isFetching</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;At least one query is fetching!&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>Vue Query also exports a handy <a href="#useisfetching"><code>useIsFetching</code></a> hook that will let you subscribe to this state in your components without creating a manual subscription to the query cache.</p><p><strong>Options</strong></p><ul><li><code>queryKey?: QueryKey</code>: <a href="./../guides/query-keys.html">Query Keys</a></li><li><code>filters?: QueryFilters</code>: <a href="./../guides/query-filters.html">Query Filters</a></li></ul><p><strong>Returns</strong></p><p>This method returns the number of fetching queries.</p><h2 id="queryclient-getdefaultoptions"><a class="header-anchor" href="#queryclient-getdefaultoptions" aria-hidden="true">#</a> <code>queryClient.getDefaultOptions</code></h2><p>The <code>getDefaultOptions</code> method returns the default options which have been set when creating the client or with <code>setDefaultOptions</code>.</p><div class="language-js"><pre><code><span class="token keyword">const</span> defaultOptions <span class="token operator">=</span> queryClient<span class="token punctuation">.</span><span class="token function">getDefaultOptions</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre></div><h2 id="queryclient-setdefaultoptions"><a class="header-anchor" href="#queryclient-setdefaultoptions" aria-hidden="true">#</a> <code>queryClient.setDefaultOptions</code></h2><p>The <code>setDefaultOptions</code> method can be used to dynamically set the default options for this queryClient.</p><div class="language-js"><pre><code>queryClient<span class="token punctuation">.</span><span class="token function">setDefaultOptions</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  queries<span class="token operator">:</span> <span class="token punctuation">{</span>\n    staleTime<span class="token operator">:</span> <span class="token number">Infinity</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><h2 id="queryclient-getquerydefaults"><a class="header-anchor" href="#queryclient-getquerydefaults" aria-hidden="true">#</a> <code>queryClient.getQueryDefaults</code></h2><p>The <code>getQueryDefaults</code> method returns the default options which have been set for specific queries:</p><div class="language-js"><pre><code><span class="token keyword">const</span> defaultOptions <span class="token operator">=</span> queryClient<span class="token punctuation">.</span><span class="token function">getQueryDefaults</span><span class="token punctuation">(</span><span class="token string">&#39;posts&#39;</span><span class="token punctuation">)</span>\n</code></pre></div><h2 id="queryclient-setquerydefaults"><a class="header-anchor" href="#queryclient-setquerydefaults" aria-hidden="true">#</a> <code>queryClient.setQueryDefaults</code></h2><p><code>setQueryDefaults</code> can be used to set default options for specific queries:</p><div class="language-js"><pre><code>queryClient<span class="token punctuation">.</span><span class="token function">setQueryDefaults</span><span class="token punctuation">(</span><span class="token string">&#39;posts&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> queryFn<span class="token operator">:</span> fetchPosts <span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token keyword">function</span> <span class="token function">Component</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token punctuation">{</span> data <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useQuery</span><span class="token punctuation">(</span><span class="token string">&#39;posts&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p><strong>Options</strong></p><ul><li><code>queryKey: QueryKey</code>: <a href="./../guides/query-keys.html">Query Keys</a></li><li><code>options: QueryOptions</code></li></ul><h2 id="queryclient-getmutationdefaults"><a class="header-anchor" href="#queryclient-getmutationdefaults" aria-hidden="true">#</a> <code>queryClient.getMutationDefaults</code></h2><p>The <code>getMutationDefaults</code> method returns the default options which have been set for specific mutations:</p><div class="language-js"><pre><code><span class="token keyword">const</span> defaultOptions <span class="token operator">=</span> queryClient<span class="token punctuation">.</span><span class="token function">getMutationDefaults</span><span class="token punctuation">(</span><span class="token string">&#39;addPost&#39;</span><span class="token punctuation">)</span>\n</code></pre></div><h2 id="queryclient-setmutationdefaults"><a class="header-anchor" href="#queryclient-setmutationdefaults" aria-hidden="true">#</a> <code>queryClient.setMutationDefaults</code></h2><p><code>setMutationDefaults</code> can be used to set default options for specific mutations:</p><div class="language-js"><pre><code>queryClient<span class="token punctuation">.</span><span class="token function">setMutationDefaults</span><span class="token punctuation">(</span><span class="token string">&#39;addPost&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> mutationFn<span class="token operator">:</span> addPost <span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token keyword">function</span> <span class="token function">Component</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token punctuation">{</span> data <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useMutation</span><span class="token punctuation">(</span><span class="token string">&#39;addPost&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p><strong>Options</strong></p><ul><li><code>mutationKey: string | unknown[]</code></li><li><code>options: MutationOptions</code></li></ul><h2 id="queryclient-getquerycache"><a class="header-anchor" href="#queryclient-getquerycache" aria-hidden="true">#</a> <code>queryClient.getQueryCache</code></h2><p>The <code>getQueryCache</code> method returns the query cache this client is connected to.</p><div class="language-js"><pre><code><span class="token keyword">const</span> queryCache <span class="token operator">=</span> queryClient<span class="token punctuation">.</span><span class="token function">getQueryCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre></div><h2 id="queryclient-getmutationcache"><a class="header-anchor" href="#queryclient-getmutationcache" aria-hidden="true">#</a> <code>queryClient.getMutationCache</code></h2><p>The <code>getMutationCache</code> method returns the mutation cache this client is connected to.</p><div class="language-js"><pre><code><span class="token keyword">const</span> mutationCache <span class="token operator">=</span> queryClient<span class="token punctuation">.</span><span class="token function">getMutationCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre></div><h2 id="queryclient-clear"><a class="header-anchor" href="#queryclient-clear" aria-hidden="true">#</a> <code>queryClient.clear</code></h2><p>The <code>clear</code> method clears all connected caches.</p><div class="language-js"><pre><code>queryClient<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre></div>',140);s.render=function(t,a,s,c,u,i){return e(),n("div",null,[o])};export default s;export{a as __pageData};
