import{l as n,f as a,G as s}from"./framework.dc3bd9a4.js";const t='{"title":"Initial Query Data","description":"","frontmatter":{"id":"initial-query-data","title":"Initial Query Data"},"headers":[{"level":2,"title":"Using initialData to prepopulate a query","slug":"using-initialdata-to-prepopulate-a-query"},{"level":3,"title":"Initial Data and staleTime","slug":"initial-data-and-staletime"},{"level":3,"title":"Initial Data Function","slug":"initial-data-function"},{"level":3,"title":"Initial Data from Cache","slug":"initial-data-from-cache"}],"relativePath":"guides/initial-query-data.md","lastUpdated":1610702694512}',o={},e=s('<p>There are many ways to supply initial data for a query to the cache before you need it:</p><ul><li>Declaratively: <ul><li>Provide <code>initialData</code> to a query to prepopulate the its cache if empty</li></ul></li><li>Imperatively: <ul><li><a href="./../prefetching.html">Prefetch the data using <code>queryClient.prefetchQuery</code></a></li><li><a href="./../prefetching.html">Manually place the data into the cache using <code>queryClient.setQueryData</code></a></li></ul></li></ul><h2 id="using-initialdata-to-prepopulate-a-query"><a class="header-anchor" href="#using-initialdata-to-prepopulate-a-query" aria-hidden="true">#</a> Using <code>initialData</code> to prepopulate a query</h2><p>There may be times when you already have the initial data for a query available in your app and can simply provide it directly to your query. If and when this is the case, you can use the <code>config.initialData</code> option to set the initial data for a query and skip the initial loading state!</p><blockquote><p>IMPORTANT: <code>initialData</code> is persisted to the cache, so it is not recommended to provide placeholder, partial or incomplete data to this option and instead use <code>placeholderData</code></p></blockquote><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">Todos</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">useQuery</span><span class="token punctuation">(</span><span class="token string">&#39;todos&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">&#39;/todos&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n    initialData<span class="token operator">:</span> initialTodos<span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h3 id="initial-data-and-staletime"><a class="header-anchor" href="#initial-data-and-staletime" aria-hidden="true">#</a> Initial Data and <code>staleTime</code></h3><p><code>initialData</code> is treated exactly the same as normal data, which means that is follows the same rules and expectations of <code>staleTime</code>.</p><ul><li>If you configure your query observer with a <code>staleTime</code> of <code>10000</code>, for example, the <code>initialData</code> you provide will be considered fresh for that same amount of time, just like your normal data.</li></ul><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">Todos</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">useQuery</span><span class="token punctuation">(</span><span class="token string">&#39;todos&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">&#39;/todos&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n    initialData<span class="token operator">:</span> initialTodos<span class="token punctuation">,</span>\n    staleTime<span class="token operator">:</span> <span class="token number">10000</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre></div><blockquote><p>If you would rather treat your data as <strong>prefetched data</strong>, we recommend that you use the <code>prefetchQuery</code> or <code>fetchQuery</code> APIs to populate the cache beforehand, thus letting you configure your <code>staleTime</code> independently from your initialData</p></blockquote><h3 id="initial-data-function"><a class="header-anchor" href="#initial-data-function" aria-hidden="true">#</a> Initial Data Function</h3><p>If the process for accessing a query&#39;s initial data is intensive or just not something you want to perform on every render, you can pass a function as the <code>initialData</code> value. This function will be executed only once when the query is initialized, saving you precious memory and/or CPU:</p><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">Todos</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">useQuery</span><span class="token punctuation">(</span><span class="token string">&#39;todos&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">&#39;/todos&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n    <span class="token function-variable function">initialData</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token function">getExpensiveTodos</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h3 id="initial-data-from-cache"><a class="header-anchor" href="#initial-data-from-cache" aria-hidden="true">#</a> Initial Data from Cache</h3><p>In some circumstances, you may be able to provide the initial data for a query from the cached result of another. A good example of this would be searching the cached data from a todos list query for an individual todo item, then using that as the initial data for your individual todo query:</p><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">Todo</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> todoId <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">useQuery</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;todo&#39;</span><span class="token punctuation">,</span> todoId<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">&#39;/todos&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n    <span class="token function-variable function">initialData</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      <span class="token comment">// Use a todo from the &#39;todos&#39; query as the initial data for this todo query</span>\n      <span class="token keyword">return</span> queryClient<span class="token punctuation">.</span><span class="token function">getQueryData</span><span class="token punctuation">(</span><span class="token string">&#39;todos&#39;</span><span class="token punctuation">)</span><span class="token operator">?.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token parameter">d</span> <span class="token operator">=&gt;</span> d<span class="token punctuation">.</span>id <span class="token operator">===</span> todoId<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>Most of the time, this pattern works well, but if the source query you&#39;re using to look up the initial data from is old, you may not want to use the data at all and just fetch from the server. To make this decision easier, you can use the <code>queryClient.getQueryState</code> method instead to get more information about the source query, including a <code>state.dataUpdatedAt</code> timestamp you can use to decide if the query is &quot;fresh&quot; enough for your needs:</p><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">Todo</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> todoId <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">useQuery</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;todo&#39;</span><span class="token punctuation">,</span> todoId<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">&#39;/todos&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n    <span class="token function-variable function">initialData</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      <span class="token comment">// Get the query state</span>\n      <span class="token keyword">const</span> state <span class="token operator">=</span> queryClient<span class="token punctuation">.</span><span class="token function">getQueryState</span><span class="token punctuation">(</span><span class="token string">&#39;todos&#39;</span><span class="token punctuation">)</span>\n\n      <span class="token comment">// If the query exists and has data that is no older than 10 seconds...</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>state <span class="token operator">&amp;&amp;</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> state<span class="token punctuation">.</span>dataUpdatedAt <span class="token operator">&lt;=</span> <span class="token number">10</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// return the individual todo</span>\n        <span class="token keyword">return</span> state<span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token parameter">d</span> <span class="token operator">=&gt;</span> d<span class="token punctuation">.</span>id <span class="token operator">===</span> todoId<span class="token punctuation">)</span>\n      <span class="token punctuation">}</span>\n\n      <span class="token comment">// Otherwise, return undefined and let it fetch!</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre></div>',19);o.render=function(s,t,o,p,c,i){return n(),a("div",null,[e])};export default o;export{t as __pageData};
