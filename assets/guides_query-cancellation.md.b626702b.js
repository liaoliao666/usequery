import{l as n,f as s,G as a}from"./framework.dc3bd9a4.js";const t='{"title":"Query Cancellation","description":"","frontmatter":{"id":"query-cancellation","title":"Query Cancellation"},"headers":[{"level":2,"title":"Using axios","slug":"using-axios"},{"level":2,"title":"Using fetch","slug":"using-fetch"},{"level":2,"title":"Manual Cancellation","slug":"manual-cancellation"}],"relativePath":"guides/query-cancellation.md","lastUpdated":1610589058669}',e={},o=a('<p>By default, queries that unmount or become unused before their promises are resolved are simply ignored instead of canceled. Why is this?</p><ul><li>For most applications, ignoring out-of-date queries is sufficient.</li><li>Cancellation APIs may not be available for every query function.</li><li>If cancellation APIs are available, they typically vary in implementation between utilities/libraries (eg. Fetch vs Axios vs XMLHttpRequest).</li></ul><p>But don&#39;t worry! If your queries are high-bandwidth or potentially very expensive to download, Vue Query exposes a generic way to <strong>cancel</strong> query requests using a cancellation token or other related API. To integrate with this feature, attach a <code>cancel</code> function to the promise returned by your query that implements your request cancellation. When a query becomes out-of-date or inactive, this <code>promise.cancel</code> function will be called (if available):</p><h2 id="using-axios"><a class="header-anchor" href="#using-axios" aria-hidden="true">#</a> Using <code>axios</code></h2><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> CancelToken <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;axios&#39;</span>\n\n<span class="token keyword">const</span> query <span class="token operator">=</span> <span class="token function">useQuery</span><span class="token punctuation">(</span><span class="token string">&#39;todos&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token comment">// Create a new CancelToken source for this request</span>\n  <span class="token keyword">const</span> source <span class="token operator">=</span> CancelToken<span class="token punctuation">.</span><span class="token function">source</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n  <span class="token keyword">const</span> promise <span class="token operator">=</span> axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/todos&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n    <span class="token comment">// Pass the source token to your request</span>\n    cancelToken<span class="token operator">:</span> source<span class="token punctuation">.</span>token<span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n  <span class="token comment">// Cancel the request if Vue Query calls the `promise.cancel` method</span>\n  promise<span class="token punctuation">.</span><span class="token function-variable function">cancel</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    source<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token string">&#39;Query was cancelled by Vue Query&#39;</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">return</span> promise\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><h2 id="using-fetch"><a class="header-anchor" href="#using-fetch" aria-hidden="true">#</a> Using <code>fetch</code></h2><div class="language-js"><pre><code><span class="token keyword">const</span> query <span class="token operator">=</span> <span class="token function">useQuery</span><span class="token punctuation">(</span><span class="token string">&#39;todos&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token comment">// Create a new AbortController instance for this request</span>\n  <span class="token keyword">const</span> controller <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AbortController</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token comment">// Get the abortController&#39;s signal</span>\n  <span class="token keyword">const</span> signal <span class="token operator">=</span> controller<span class="token punctuation">.</span>signal\n\n  <span class="token keyword">const</span> promise <span class="token operator">=</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">&#39;/todos&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n    method<span class="token operator">:</span> <span class="token string">&#39;get&#39;</span><span class="token punctuation">,</span>\n    <span class="token comment">// Pass the signal to your request</span>\n    signal<span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n  <span class="token comment">// Cancel the request if Vue Query calls the `promise.cancel` method</span>\n  promise<span class="token punctuation">.</span><span class="token function-variable function">cancel</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> controller<span class="token punctuation">.</span><span class="token function">abort</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n  <span class="token keyword">return</span> promise\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><h2 id="manual-cancellation"><a class="header-anchor" href="#manual-cancellation" aria-hidden="true">#</a> Manual Cancellation</h2><p>You might want to cancel a query manually. For example, if the request takes a long time to finish, you can allow the user to click a cancel button to stop the request. To do this, you just need to call <code>cache.cancelQueries(key)</code>. If <code>promise.cancel</code> is available, Vue Query will cancel the request.</p><div class="language-js"><pre><code><span class="token keyword">const</span> <span class="token punctuation">[</span>queryKey<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">&#39;todos&#39;</span><span class="token punctuation">)</span>\n\n<span class="token keyword">const</span> query <span class="token operator">=</span> <span class="token function">useQuery</span><span class="token punctuation">(</span>queryKey<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> controller <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AbortController</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token keyword">const</span> signal <span class="token operator">=</span> controller<span class="token punctuation">.</span>signal\n\n  <span class="token keyword">const</span> promise <span class="token operator">=</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">&#39;/todos&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n    method<span class="token operator">:</span> <span class="token string">&#39;get&#39;</span><span class="token punctuation">,</span>\n    signal<span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n  <span class="token comment">// Cancel the request if Vue Query calls the `promise.cancel` method</span>\n  promise<span class="token punctuation">.</span><span class="token function-variable function">cancel</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> controller<span class="token punctuation">.</span><span class="token function">abort</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n  <span class="token keyword">return</span> promise\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token keyword">const</span> cache <span class="token operator">=</span> <span class="token function">useQueryCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">return</span> <span class="token punctuation">(</span>\n  <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    cache<span class="token punctuation">.</span><span class="token function">cancelQueries</span><span class="token punctuation">(</span>queryKey<span class="token punctuation">)</span><span class="token punctuation">;</span>\n   <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&gt;</span>Cancel<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>\n<span class="token punctuation">)</span>\n</code></pre></div>',10);e.render=function(a,t,e,p,c,l){return n(),s("div",null,[o])};export default e;export{t as __pageData};
