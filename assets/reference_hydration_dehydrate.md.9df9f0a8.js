import{l as e,f as t,G as o}from"./framework.dc3bd9a4.js";const n='{"title":"hydration/dehydrate","description":"","frontmatter":{"id":"hydration/dehydrate","title":"hydration/dehydrate"},"relativePath":"reference/hydration/dehydrate.md","lastUpdated":1610594008261}',a={},i=o('<p><code>dehydrate</code> creates a frozen representation of a <code>cache</code> that can later be hydrated with <code>Hydrate</code>, <code>useHydrate</code>, or <code>hydrate</code>. This is useful for passing prefetched queries from server to client or persisting queries to localstorage or other persisten locations. It only includes currently successful queries by default.</p><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> dehydrate <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vu-query/hydration&#39;</span>\n\n<span class="token keyword">const</span> dehydratedState <span class="token operator">=</span> <span class="token function">dehydrate</span><span class="token punctuation">(</span>queryClient<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  shouldDehydrateQuery<span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><p><strong>Options</strong></p><ul><li><code>client: QueryClient</code><ul><li><strong>Required</strong></li><li>The <code>queryClient</code> that should be dehydrated</li></ul></li><li><code>options: DehydrateOptions</code><ul><li>Optional</li><li><code>dehydrateMutations: boolean</code><ul><li>Optional</li><li>Whether or not to dehydrate mutations.</li></ul></li><li><code>dehydrateQueries: boolean</code><ul><li>Optional</li><li>Whether or not to dehydrate queries.</li></ul></li><li><code>shouldDehydrateMutation: (mutation: Mutation) =&gt; boolean</code><ul><li>Optional</li><li>This function is called for each mutation in the cache</li><li>Return <code>true</code> to include this mutation in dehydration, or <code>false</code> otherwise</li><li>The default version only includes paused mutations</li></ul></li><li><code>shouldDehydrateQuery: (query: Query) =&gt; boolean</code><ul><li>Optional</li><li>This function is called for each query in the cache</li><li>Return <code>true</code> to include this query in dehydration, or <code>false</code> otherwise</li><li>The default version only includes successful queries, do <code>shouldDehydrateQuery: () =&gt; true</code> to include all queries</li></ul></li></ul></li></ul><p><strong>Returns</strong></p><ul><li><code>dehydratedState: DehydratedState</code><ul><li>This includes everything that is needed to hydrate the <code>queryClient</code> at a later point</li><li>You <strong>should not</strong> rely on the exact format of this response, it is not part of the public API and can change at any time</li><li>This result is not in serialized form, you need to do that yourself if desired</li></ul></li></ul>',6);a.render=function(o,n,a,l,s,d){return e(),t("div",null,[i])};export default a;export{n as __pageData};
