import{l as e,f as a,G as n}from"./framework.dc3bd9a4.js";const t='{"title":"Prefetching","description":"","frontmatter":{"id":"prefetching","title":"Prefetching"},"headers":[{"level":2,"title":"Manually Priming a Query","slug":"manually-priming-a-query"}],"relativePath":"guides/prefetching.md","lastUpdated":1610904177233}',s={},o=n('<p>If you&#39;re lucky enough, you may know enough about what your users will do to be able to prefetch the data they need before it&#39;s needed! If this is the case, you can use the <code>prefetchQuery</code> method to prefetch the results of a query to be placed into the cache:</p><div class="language-js"><pre><code><span class="token keyword">const</span> <span class="token function-variable function">prefetchTodos</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token comment">// The results of this query will be cached like a normal query</span>\n  <span class="token keyword">await</span> queryClient<span class="token punctuation">.</span><span class="token function">prefetchQuery</span><span class="token punctuation">(</span><span class="token string">&#39;todos&#39;</span><span class="token punctuation">,</span> fetchTodos<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre></div><ul><li>If data for this query is already in the cache and <strong>not invalidated</strong>, the data will not be fetched</li><li>If a <code>staleTime</code> is passed eg. <code>prefetchQuery(&#39;todos&#39;, fn, { staleTime: 5000 })</code> and the data is older than the specified staleTime, the query will be fetched</li><li>If no instances of <code>useQuery</code> appear for a prefetched query, it will be deleted and garbage collected after the time specified in <code>cacheTime</code>.</li></ul><h2 id="manually-priming-a-query"><a class="header-anchor" href="#manually-priming-a-query" aria-hidden="true">#</a> Manually Priming a Query</h2><p>Alternatively, if you already have the data for your query synchronously available, you don&#39;t need to prefetch it. You can just use the <a href="./../reference/QueryClient.html#queryclientsetquerydata">Query Client&#39;s <code>setQueryData</code> method</a> to directly add or update a query&#39;s cached result by key.</p><div class="language-js"><pre><code>queryClient<span class="token punctuation">.</span><span class="token function">setQueryData</span><span class="token punctuation">(</span><span class="token string">&#39;todos&#39;</span><span class="token punctuation">,</span> todos<span class="token punctuation">)</span>\n</code></pre></div>',6);s.render=function(n,t,s,c,r,l){return e(),a("div",null,[o])};export default s;export{t as __pageData};
