import{l as n,f as s,G as a}from"./framework.dc3bd9a4.js";const e='{"title":"Query Retries","description":"","frontmatter":{"id":"query-retries","title":"Query Retries"},"headers":[{"level":2,"title":"Retry Delay","slug":"retry-delay"}],"relativePath":"guides/query-retries.md","lastUpdated":1610601521825}',t={},o=a('<p>When a <code>useQuery</code> query fails (the query function throws an error), Vu Query will automatically retry the query if that query&#39;s request has not reached the max number of consecutive retries (defaults to <code>3</code>) or a function is provided to determine if a retry is allowed.</p><p>You can configure retries both on a global level and an individual query level.</p><ul><li>Setting <code>retry = false</code> will disable retries.</li><li>Setting <code>retry = 6</code> will retry failing requests 6 times before showing the final error thrown by the function.</li><li>Setting <code>retry = true</code> will infinitely retry failing requests.</li><li>Setting <code>retry = (failureCount, error) =&gt; ...</code> allows for custom logic based on why the request failed.</li></ul><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> useQuery <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vu-query&#39;</span>\n\n<span class="token comment">// Make a specific query retry a certain number of times</span>\n<span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">useQuery</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;todos&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> fetchTodoListPage<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  retry<span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token comment">// Will retry failed requests 10 times before displaying an error</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><h2 id="retry-delay"><a class="header-anchor" href="#retry-delay" aria-hidden="true">#</a> Retry Delay</h2><p>By default, retries in Vu Query do not happen immediately after a request fails. As is standard, a back-off delay is gradually applied to each retry attempt.</p><p>The default <code>retryDelay</code> is set to double (starting at <code>1000</code>ms) with each attempt, but not exceed 30 seconds:</p><div class="language-js"><pre><code><span class="token comment">// Configure for all queries</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> QueryCache<span class="token punctuation">,</span> QueryClient<span class="token punctuation">,</span> QueryClientProvider <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vu-query&#39;</span>\n\n<span class="token keyword">const</span> queryClient <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryClient</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  defaultOptions<span class="token operator">:</span> <span class="token punctuation">{</span>\n    queries<span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token function-variable function">retryDelay</span><span class="token operator">:</span> <span class="token parameter">attemptIndex</span> <span class="token operator">=&gt;</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token number">1000</span> <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">**</span> attemptIndex<span class="token punctuation">,</span> <span class="token number">30000</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token operator">&lt;</span>QueryClientProvider client<span class="token operator">=</span><span class="token punctuation">{</span>queryClient<span class="token punctuation">}</span><span class="token operator">&gt;</span><span class="token operator">...</span><span class="token operator">&lt;</span><span class="token operator">/</span>QueryClientProvider<span class="token operator">&gt;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>Though it is not recommended, you can obviously override the <code>retryDelay</code> function/integer in both the Provider and individual query options. If set to an integer instead of a function the delay will always be the same amount of time:</p><div class="language-js"><pre><code><span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">useQuery</span><span class="token punctuation">(</span><span class="token string">&#39;todos&#39;</span><span class="token punctuation">,</span> fetchTodoList<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  retryDelay<span class="token operator">:</span> <span class="token number">1000</span><span class="token punctuation">,</span> <span class="token comment">// Will always wait 1000ms to retry, regardless of how many retries</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div>',10);t.render=function(a,e,t,p,r,c){return n(),s("div",null,[o])};export default t;export{e as __pageData};
