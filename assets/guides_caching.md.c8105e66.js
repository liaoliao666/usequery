import{l as e,f as t,G as a}from"./framework.dc3bd9a4.js";const o='{"title":"Caching Examples","description":"","frontmatter":{"id":"caching","title":"Caching Examples"},"headers":[{"level":2,"title":"Basic Example","slug":"basic-example"}],"relativePath":"guides/caching.md","lastUpdated":1611421790276}',i={},s=a('<blockquote><p>Please thoroughly read the <a href="./important-defaults.html">Important Defaults</a> before reading this guide</p></blockquote><h2 id="basic-example"><a class="header-anchor" href="#basic-example" aria-hidden="true">#</a> Basic Example</h2><p>This caching example illustrates the story and lifecycle of:</p><ul><li>Query Instances with and without cache data</li><li>Background Refetching</li><li>Inactive Queries</li><li>Garbage Collection</li></ul><p>Let&#39;s assume we are using the default <code>cacheTime</code> of <strong>5 minutes</strong> and the default <code>staleTime</code> of <code>0</code>.</p><ul><li>A new instance of <code>useQuery(&#39;todos&#39;, fetchTodos)</code> mounts. <ul><li>Since no other queries have been made with this query + variable combination, this query will show a hard loading state and make a network request to fetch the data.</li><li>It will then cache the data using <code>&#39;todos&#39;</code> and <code>fetchTodos</code> as the unique identifiers for that cache.</li><li>The hook will mark itself as stale after the configured <code>staleTime</code> (defaults to <code>0</code>, or immediately).</li></ul></li><li>A second instance of <code>useQuery(&#39;todos&#39;, fetchTodos)</code> mounts elsewhere. <ul><li>Because this exact data exist in the cache from the first instance of this query, that data is immediately returned from the cache.</li></ul></li><li>A background refetch is triggered for both queries (but only one request), since a new instance appeared on screen. <ul><li>Both instances are updated with the new data if the fetch is successful</li></ul></li><li>Both instances of the <code>useQuery(&#39;todos&#39;, fetchTodos)</code> query are unmounted and no longer in use. <ul><li>Since there are no more active instances to this query, a cache timeout is set using <code>cacheTime</code> to delete and garbage collect the query (defaults to <strong>5 minutes</strong>).</li></ul></li><li>Before the cache timeout has completed another instance of <code>useQuery(&#39;todos&#39;, fetchTodos)</code> mounts. The query immediately returns the available cached value while the <code>fetchTodos</code> function is being run in the background to populate the query with a fresh value.</li><li>The final instance of <code>useQuery(&#39;todos&#39;, fetchTodos)</code> unmounts.</li><li>No more instances of <code>useQuery(&#39;todos&#39;, fetchTodos)</code> appear within <strong>5 minutes</strong>. <ul><li>This query and its data are deleted and garbage collected.</li></ul></li></ul>',6);i.render=function(a,o,i,l,c,n){return e(),t("div",null,[s])};export default i;export{o as __pageData};
