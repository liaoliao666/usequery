import{l as n,f as a,G as s}from"./framework.dc3bd9a4.js";const t='{"title":"Invalidation from Mutations","description":"","frontmatter":{"id":"invalidation-from-mutations","title":"Invalidation from Mutations"},"relativePath":"guides/invalidations-from-mutations.md","lastUpdated":1610593423769}',o={},e=s('<p>Invalidating queries is only half the battle. Knowing <strong>when</strong> to invalidate them is the other half. Usually when a mutation in your app succeeds, it&#39;s VERY likely that there are related queries in your application that need to be invalidated and possibly refetched to account for the new changes from your mutation.</p><p>For example, assume we have a mutation to post a new todo:</p><div class="language-js"><pre><code><span class="token keyword">const</span> mutation <span class="token operator">=</span> <span class="token function">useMutation</span><span class="token punctuation">(</span>postTodo<span class="token punctuation">)</span>\n</code></pre></div><p>When a successful <code>postTodo</code> mutation happens, we likely want all <code>todos</code> queries to get invalidated and possibly refetched to show the new todo item. To do this, you can use <code>useMutation</code>&#39;s <code>onSuccess</code> options and the <code>client</code>&#39;s <code>invalidateQueries</code> function:</p><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> useMutation<span class="token punctuation">,</span> useQueryClient <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vu-query&#39;</span>\n\n<span class="token keyword">const</span> queryClient <span class="token operator">=</span> <span class="token function">useQueryClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n<span class="token comment">// When this mutation succeeds, invalidate any queries with the `todos` or `reminders` query key</span>\n<span class="token keyword">const</span> mutation <span class="token operator">=</span> <span class="token function">useMutation</span><span class="token punctuation">(</span>addTodo<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  <span class="token function-variable function">onSuccess</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    queryClient<span class="token punctuation">.</span><span class="token function">invalidateQueries</span><span class="token punctuation">(</span><span class="token string">&#39;todos&#39;</span><span class="token punctuation">)</span>\n    queryClient<span class="token punctuation">.</span><span class="token function">invalidateQueries</span><span class="token punctuation">(</span><span class="token string">&#39;reminders&#39;</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><p>You can wire up your invalidations to happen using any of the callbacks available in the <a href="./mutations.html"><code>useMutation</code> hook</a></p>',6);o.render=function(s,t,o,p,i,c){return n(),a("div",null,[e])};export default o;export{t as __pageData};
