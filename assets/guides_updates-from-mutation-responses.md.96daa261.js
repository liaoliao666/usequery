import{l as n,f as a,G as s}from"./framework.dc3bd9a4.js";const t='{"title":"Updates from Mutation Responses","description":"","frontmatter":{"id":"updates-from-mutation-responses","title":"Updates from Mutation Responses"},"relativePath":"guides/updates-from-mutation-responses.md","lastUpdated":1610801842881}',o={},p=s('<p>When dealing with mutations that <strong>update</strong> objects on the server, it&#39;s common for the new object to be automatically returned in the response of the mutation. Instead of refetching any queries for that item and wasting a network call for data we already have, we can take advantage of the object returned by the mutation function and update the existing query with the new data immediately using the <a href="./../reference/QueryClient.html#queryclientsetquerydata">Query Client&#39;s <code>setQueryData</code></a> method:</p><div class="language-js"><pre><code><span class="token keyword">const</span> queryClient <span class="token operator">=</span> <span class="token function">useQueryClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n<span class="token keyword">const</span> mutation <span class="token operator">=</span> <span class="token function">useMutation</span><span class="token punctuation">(</span>editTodo<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  <span class="token function-variable function">onSuccess</span><span class="token operator">:</span> <span class="token parameter">data</span> <span class="token operator">=&gt;</span> queryClient<span class="token punctuation">.</span><span class="token function">setQueryData</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;todo&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token number">5</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\nmutation<span class="token punctuation">.</span><span class="token function">mutate</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  id<span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span>\n  name<span class="token operator">:</span> <span class="token string">&#39;Do the laundry&#39;</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token comment">// The query below will be updated with the response from the</span>\n<span class="token comment">// successful mutation</span>\n<span class="token keyword">const</span> <span class="token punctuation">{</span> status<span class="token punctuation">,</span> data<span class="token punctuation">,</span> error <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useQuery</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;todo&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token number">5</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span> fetchTodoByID<span class="token punctuation">)</span>\n</code></pre></div><p>You might want to tie the <code>onSuccess</code> logic into a reusable mutation, for that you can create a custom hook like this:</p><div class="language-js"><pre><code><span class="token keyword">const</span> <span class="token function-variable function">useMutateTodo</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> queryClient <span class="token operator">=</span> <span class="token function">useQueryClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n  <span class="token keyword">return</span> <span class="token function">useMutation</span><span class="token punctuation">(</span>editTodo<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n    <span class="token comment">// Notice the second argument is the variables object that the `mutate` function receives</span>\n    <span class="token function-variable function">onSuccess</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">data<span class="token punctuation">,</span> variables</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      queryClient<span class="token punctuation">.</span><span class="token function">setQueryData</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;todo&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> id<span class="token operator">:</span> variables<span class="token punctuation">.</span>id <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre></div>',4);o.render=function(s,t,o,e,c,u){return n(),a("div",null,[p])};export default o;export{t as __pageData};
