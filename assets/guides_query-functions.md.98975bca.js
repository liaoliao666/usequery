import{l as n,f as s,G as a}from"./framework.dc3bd9a4.js";const t='{"title":"Query Functions","description":"","frontmatter":{"id":"query-functions","title":"Query Functions"},"headers":[{"level":2,"title":"Handling and Throwing Errors","slug":"handling-and-throwing-errors"},{"level":2,"title":"Usage with fetch and others clients that do not throw by default","slug":"usage-with-fetch-and-others-clients-that-do-not-throw-by-default"},{"level":2,"title":"Query Function Variables","slug":"query-function-variables"},{"level":2,"title":"Using a Query Object instead of parameters","slug":"using-a-query-object-instead-of-parameters"}],"relativePath":"guides/query-functions.md","lastUpdated":1610702694512}',o={},e=a('<p>A query function can be literally any function that <strong>returns a promise</strong>. The promise that is returned should either <strong>resolve the data</strong> or <strong>throw an error</strong>.</p><p>All of the following are valid query function configurations:</p><div class="language-js"><pre><code><span class="token function">useQuery</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;todos&#39;</span><span class="token punctuation">,</span> todoId<span class="token punctuation">]</span><span class="token punctuation">,</span> fetchTodoById<span class="token punctuation">)</span>\n<span class="token function">useQuery</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;todos&#39;</span><span class="token punctuation">,</span> todoId<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">fetchTodoById</span><span class="token punctuation">(</span>todoId<span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token function">useQuery</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;todos&#39;</span><span class="token punctuation">,</span> todoId<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetchTodoById</span><span class="token punctuation">(</span>todoId<span class="token punctuation">)</span>\n  <span class="token keyword">return</span> data\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><h2 id="handling-and-throwing-errors"><a class="header-anchor" href="#handling-and-throwing-errors" aria-hidden="true">#</a> Handling and Throwing Errors</h2><p>For Vu Query to determine a query has errored, the query function <strong>must throw</strong>. Any error that is thrown in the query function will be persisted on the <code>error</code> state of the query.</p><div class="language-js"><pre><code><span class="token keyword">const</span> <span class="token punctuation">{</span> error <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useQuery</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;todos&#39;</span><span class="token punctuation">,</span> todoId<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>somethingGoesWrong<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;Oh no!&#39;</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">return</span> data\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><h2 id="usage-with-fetch-and-others-clients-that-do-not-throw-by-default"><a class="header-anchor" href="#usage-with-fetch-and-others-clients-that-do-not-throw-by-default" aria-hidden="true">#</a> Usage with <code>fetch</code> and others clients that do not throw by default</h2><p>While most utilities like <code>axios</code> or <code>graphql-request</code> automatically throw errors for unsuccessful HTTP calls, some utilities like <code>fetch</code> do not throw errors by default. If that&#39;s the case, you&#39;ll need to throw them on your own. Here is a simple way to do that with the popular <code>fetch</code> API:</p><div class="language-js"><pre><code><span class="token function">useQuery</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;todos&#39;</span><span class="token punctuation">,</span> todoId<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token punctuation">{</span> ok<span class="token punctuation">,</span> json <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">&#39;/todos/&#39;</span> <span class="token operator">+</span> todoId<span class="token punctuation">)</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ok<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;Network response was not ok&#39;</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> <span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><h2 id="query-function-variables"><a class="header-anchor" href="#query-function-variables" aria-hidden="true">#</a> Query Function Variables</h2><p>Query keys are not just for uniquely identifying the data you are fetching, but are also conveniently passed into your query function and while not always necessary, this makes it possible to extract your query functions if needed:</p><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">Todos</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> completed <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">useQuery</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;todos&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> status<span class="token punctuation">,</span> page <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span> fetchTodoList<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// Access the key, status and page variables in your query function!</span>\n<span class="token keyword">function</span> <span class="token function">fetchTodoList</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> queryKey <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token punctuation">[</span>_key<span class="token punctuation">,</span> <span class="token punctuation">{</span> status<span class="token punctuation">,</span> page <span class="token punctuation">}</span><span class="token punctuation">]</span> <span class="token operator">=</span> queryKey\n  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h2 id="using-a-query-object-instead-of-parameters"><a class="header-anchor" href="#using-a-query-object-instead-of-parameters" aria-hidden="true">#</a> Using a Query Object instead of parameters</h2><p>Anywhere the <code>[queryKey, queryFn, config]</code> signature is supported throughout Vu Query&#39;s API, you can also use an object to express the same configuration:</p><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> useQuery <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vu-query&#39;</span>\n\n<span class="token function">useQuery</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  queryKey<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;todo&#39;</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  queryFn<span class="token operator">:</span> fetchTodo<span class="token punctuation">,</span>\n  <span class="token operator">...</span>config<span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div>',15);o.render=function(a,t,o,p,c,u){return n(),s("div",null,[e])};export default o;export{t as __pageData};
