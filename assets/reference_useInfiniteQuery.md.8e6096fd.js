import{l as e,f as a,G as n}from"./framework.dc3bd9a4.js";const t='{"title":"useInfiniteQuery","description":"","frontmatter":{"id":"useInfiniteQuery","title":"useInfiniteQuery"},"relativePath":"reference/useInfiniteQuery.md","lastUpdated":1610594008261}',s={},o=n('<div class="language-js"><pre><code><span class="token keyword">const</span> <span class="token punctuation">{</span>\n  fetchNextPage<span class="token punctuation">,</span>\n  fetchPreviousPage<span class="token punctuation">,</span>\n  hasNextPage<span class="token punctuation">,</span>\n  hasPreviousPage<span class="token punctuation">,</span>\n  isFetchingNextPage<span class="token punctuation">,</span>\n  isFetchingPreviousPage<span class="token punctuation">,</span>\n  <span class="token operator">...</span>result\n<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useInfiniteQuery</span><span class="token punctuation">(</span>queryKey<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> pageParam <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">fetchPage</span><span class="token punctuation">(</span>pageParam<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  <span class="token operator">...</span>options<span class="token punctuation">,</span>\n  <span class="token function-variable function">getNextPageParam</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">lastPage<span class="token punctuation">,</span> allPages</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> lastPage<span class="token punctuation">.</span>nextCursor<span class="token punctuation">,</span>\n  <span class="token function-variable function">getPreviousPageParam</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">firstPage<span class="token punctuation">,</span> allPages</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> firstPage<span class="token punctuation">.</span>prevCursor<span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><p><strong>Options</strong></p><p>The options for <code>useInfiniteQuery</code> are identical to the <a href="#usequery"><code>useQuery</code> hook</a> with the addition of the following:</p><ul><li><code>queryFn: (context: QueryFunctionContext) =&gt; Promise&lt;TData&gt;</code><ul><li><strong>Required, but only if no default query function has been defined</strong></li><li>The function that the query will use to request data.</li><li>Receives a <code>QueryFunctionContext</code> object with the following variables: <ul><li><code>queryKey: QueryKey</code></li><li><code>pageParam: unknown | undefined</code></li></ul></li><li>Must return a promise that will either resolves data or throws an error.</li></ul></li><li><code>getNextPageParam: (lastPage, allPages) =&gt; unknown | undefined</code><ul><li>When new data is received for this query, this function receives both the last page of the infinite list of data and the full array of all pages.</li><li>It should return a <strong>single variable</strong> that will be passed as the last optional parameter to your query function.</li><li>Return <code>undefined</code> to indicate there is no next page available.</li></ul></li><li><code>getPreviousPageParam: (firstPage, allPages) =&gt; unknown | undefined</code><ul><li>When new data is received for this query, this function receives both the first page of the infinite list of data and the full array of all pages.</li><li>It should return a <strong>single variable</strong> that will be passed as the last optional parameter to your query function.</li><li>Return <code>undefined</code> to indicate there is no previous page available.</li></ul></li></ul><p><strong>Returns</strong></p><p>The returned properties for <code>useInfiniteQuery</code> are identical to the <a href="#usequery"><code>useQuery</code> hook</a>, with the addition of the following:</p><ul><li><code>data.pages: TData[]</code><ul><li>Array containing all pages.</li></ul></li><li><code>data.pageParams: unknown[]</code><ul><li>Array containing all page params.</li></ul></li><li><code>isFetchingNextPage: boolean</code><ul><li>Will be <code>true</code> while fetching the next page with <code>fetchNextPage</code>.</li></ul></li><li><code>isFetchingPreviousPage: boolean</code><ul><li>Will be <code>true</code> while fetching the previous page with <code>fetchPreviousPage</code>.</li></ul></li><li><code>fetchNextPage: (options?: FetchNextPageOptions) =&gt; Promise&lt;UseInfiniteQueryResult&gt;</code><ul><li>This function allows you to fetch the next &quot;page&quot; of results.</li><li><code>options.pageParam: unknown</code> allows you to manually specify a page param instead of using <code>getNextPageParam</code>.</li></ul></li><li><code>fetchPreviousPage: (options?: FetchPreviousPageOptions) =&gt; Promise&lt;UseInfiniteQueryResult&gt;</code><ul><li>This function allows you to fetch the previous &quot;page&quot; of results.</li><li><code>options.pageParam: unknown</code> allows you to manually specify a page param instead of using <code>getPreviousPageParam</code>.</li></ul></li><li><code>hasNextPage: boolean</code><ul><li>This will be <code>true</code> if there is a next page to be fetched (known via the <code>getNextPageParam</code> option).</li></ul></li><li><code>hasPreviousPage: boolean</code><ul><li>This will be <code>true</code> if there is a previous page to be fetched (known via the <code>getPreviousPageParam</code> option).</li></ul></li></ul>',7);s.render=function(n,t,s,i,l,u){return e(),a("div",null,[o])};export default s;export{t as __pageData};
