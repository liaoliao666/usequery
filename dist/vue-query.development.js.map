{"version":3,"file":"vue-query.development.js","sources":["../node_modules/@babel/runtime/helpers/esm/inheritsLoose.js","../node_modules/@babel/runtime/helpers/esm/extends.js","../src/core/utils.ts","../src/core/logger.ts","../src/core/subscribable.ts","../src/core/focusManager.ts","../src/core/onlineManager.ts","../src/core/retryer.ts","../src/core/query.ts","../src/core/queryCache.ts","../src/core/mutation.ts","../src/core/mutationCache.ts","../src/core/infiniteQueryBehavior.ts","../src/core/queryClient.ts","../src/core/queryObserver.ts","../src/core/queriesObserver.ts","../src/core/infiniteQueryObserver.ts","../src/core/mutationObserver.ts","../src/use/logger.ts","../src/use/setLogger.ts","../src/use/QueryClientProvider.ts","../src/use/useIsFetching.ts","../src/use/useMutation.ts","../src/use/useBaseQuery.ts","../src/use/useQuery.ts","../src/use/useQueries.ts","../src/use/useInfiniteQuery.ts"],"sourcesContent":["export default function _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}","export default function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}","import { isRef } from 'vue'\n\nimport type { Query } from './query'\nimport type {\n  MutationFunction,\n  MutationKeyWithRef,\n  MutationOptions,\n  MutationOptionsWithRef,\n  QueryFunction,\n  QueryKey,\n  QueryKeyHashFunction,\n  QueryKeyWithRef,\n  QueryOptions,\n  QueryOptionsWithRef,\n  QueryStatus,\n} from './types'\n\n// TYPES\n\nexport interface QueryFilters {\n  /**\n   * Include or exclude active queries\n   */\n  active?: boolean\n  /**\n   * Match query key exactly\n   */\n  exact?: boolean\n  /**\n   * Include or exclude inactive queries\n   */\n  inactive?: boolean\n  /**\n   * Include queries matching this predicate function\n   */\n  predicate?: (query: Query) => boolean\n  /**\n   * Include queries matching this query key\n   */\n  queryKey?: QueryKey\n  /**\n   * Include or exclude stale queries\n   */\n  stale?: boolean\n  /**\n   * Include or exclude fetching queries\n   */\n  fetching?: boolean\n}\n\nexport type DataUpdateFunction<TInput, TOutput> = (input: TInput) => TOutput\n\nexport type Updater<TInput, TOutput> =\n  | TOutput\n  | DataUpdateFunction<TInput, TOutput>\n\n// UTILS\n\nexport const isServer = typeof window === 'undefined'\n\nexport function noop(): undefined {\n  return undefined\n}\n\nexport function functionalUpdate<TInput, TOutput>(\n  updater: Updater<TInput, TOutput>,\n  input: TInput\n): TOutput {\n  return typeof updater === 'function'\n    ? (updater as DataUpdateFunction<TInput, TOutput>)(input)\n    : updater\n}\n\nexport function isValidTimeout(value: any): value is number {\n  return typeof value === 'number' && value >= 0 && value !== Infinity\n}\n\nexport function ensureArray<T>(value: T | T[]): T[] {\n  return Array.isArray(value) ? value : [value]\n}\n\nexport function difference<T>(array1: T[], array2: T[]): T[] {\n  return array1.filter(x => array2.indexOf(x) === -1)\n}\n\nexport function timeUntilStale(updatedAt: number, staleTime?: number): number {\n  return Math.max(updatedAt + (staleTime || 0) - Date.now(), 0)\n}\n\nexport function parseQueryArgs<TOptions extends QueryOptions<any, any, any>>(\n  arg1: QueryKeyWithRef | QueryOptionsWithRef<any, any, any>,\n  arg2?: QueryFunction<any> | QueryOptionsWithRef<any, any, any>,\n  arg3?: QueryOptionsWithRef<any, any, any>\n): TOptions {\n  if (!isQueryKey(arg1)) {\n    return arg1 as TOptions\n  }\n\n  if (typeof arg2 === 'function') {\n    return { ...arg3, queryKey: arg1, queryFn: arg2 } as TOptions\n  }\n\n  return unwrapRefs({ ...arg2, queryKey: arg1 }) as TOptions\n}\n\nexport function parseMutationArgs<\n  TOptions extends MutationOptions<any, any, any, any>\n>(\n  arg1:\n    | MutationKeyWithRef\n    | MutationFunction<any, any>\n    | MutationOptionsWithRef<any, any, any, any>,\n  arg2?:\n    | MutationFunction<any, any>\n    | MutationOptionsWithRef<any, any, any, any>,\n  arg3?: MutationOptionsWithRef<any, any, any, any>\n): TOptions {\n  if (isQueryKey(arg1)) {\n    if (typeof arg2 === 'function') {\n      return unwrapRefs({\n        ...arg3,\n        mutationKey: arg1,\n        mutationFn: arg2,\n      }) as TOptions\n    }\n    return unwrapRefs({ ...arg2, mutationKey: arg1 }) as TOptions\n  }\n\n  if (typeof arg1 === 'function') {\n    return unwrapRefs({ ...arg2, mutationFn: arg1 }) as TOptions\n  }\n\n  return unwrapRefs({ ...arg1 }) as TOptions\n}\n\nexport function parseFilterArgs<\n  TFilters extends QueryFilters,\n  TOptions = unknown\n>(\n  arg1?: QueryKeyWithRef | TFilters,\n  arg2?: TFilters | TOptions,\n  arg3?: TOptions\n): [TFilters, TOptions | undefined] {\n  return (isQueryKey(arg1)\n    ? [{ ...arg2, queryKey: unwrapRefs(arg1) }, arg3]\n    : [arg1 || {}, arg2]) as [TFilters, TOptions]\n}\n\nexport function matchQuery(\n  filters: QueryFilters,\n  query: Query<any, any>\n): boolean {\n  const {\n    active,\n    exact,\n    fetching,\n    inactive,\n    predicate,\n    queryKey,\n    stale,\n  } = filters\n\n  if (isQueryKey(queryKey)) {\n    if (exact) {\n      const hashFn = getQueryKeyHashFn(query.options)\n      if (query.queryHash !== hashFn(queryKey)) {\n        return false\n      }\n    } else if (!partialMatchKey(query.queryKey, queryKey)) {\n      return false\n    }\n  }\n\n  let isActive\n\n  if (inactive === false || (active && !inactive)) {\n    isActive = true\n  } else if (active === false || (inactive && !active)) {\n    isActive = false\n  }\n\n  if (typeof isActive === 'boolean' && query.isActive() !== isActive) {\n    return false\n  }\n\n  if (typeof stale === 'boolean' && query.isStale() !== stale) {\n    return false\n  }\n\n  if (typeof fetching === 'boolean' && query.isFetching() !== fetching) {\n    return false\n  }\n\n  if (predicate && !predicate(query)) {\n    return false\n  }\n\n  return true\n}\n\nexport function getQueryKeyHashFn(\n  options?: QueryOptions<any, any>\n): QueryKeyHashFunction {\n  return options?.queryKeyHashFn || hashQueryKey\n}\n\n/**\n * Default query keys hash function.\n */\nexport function hashQueryKey(queryKey: QueryKey): string {\n  return stableValueHash(queryKey)\n}\n\n/**\n * Hashes the value into a stable hash.\n */\nexport function stableValueHash(value: any): string {\n  return JSON.stringify(value, (_, val) =>\n    isPlainObject(val)\n      ? Object.keys(val)\n          .sort()\n          .reduce((result, key) => {\n            result[key] = val[key]\n            return result\n          }, {} as any)\n      : val\n  )\n}\n\n/**\n * Checks if key `b` partially matches with key `a`.\n */\nexport function partialMatchKey(\n  a: string | unknown[],\n  b: string | unknown[]\n): boolean {\n  return partialDeepEqual(ensureArray(a), ensureArray(b))\n}\n\n/**\n * Checks if `b` partially matches with `a`.\n */\nexport function partialDeepEqual(a: any, b: any): boolean {\n  if (a === b) {\n    return true\n  }\n\n  if (typeof a !== typeof b) {\n    return false\n  }\n\n  if (a && b && typeof a === 'object' && typeof b === 'object') {\n    return !Object.keys(b).some(key => !partialDeepEqual(a[key], b[key]))\n  }\n\n  return false\n}\n\n/**\n * it will replace any deeply equal children of `b` with those of `a`.\n * This can be used for structural sharing between JSON values for example.\n */\nexport function replaceEqualDeep<T>(a: unknown, b: T): T\nexport function replaceEqualDeep(a: any, b: any) {\n  if (a === b) return a\n\n  const array = Array.isArray(a) && Array.isArray(b)\n  const isSameObject = array || (isPlainObject(a) && isPlainObject(b))\n\n  if (isSameObject) {\n    if (array) {\n      const bSize = b.length\n      // omit array keys\n      if (a.length > bSize) {\n        a.splice(bSize)\n      }\n\n      // pick array keys\n      for (let i = 0; i < bSize; i++) {\n        a[i] = replaceEqualDeep(a[i], b[i])\n      }\n    } else {\n      const aKeys = Object.keys(a)\n      const bKeys = Object.keys(b)\n      const hash = new Set(bKeys)\n\n      for (let i = 0, len = aKeys.length; i < len; i++) {\n        const key = aKeys[i]\n        if (!hash.has(key)) {\n          // omit object keys\n          delete a[key]\n        }\n      }\n\n      for (let i = 0, len = bKeys.length; i < len; i++) {\n        const key = bKeys[i]\n        // pick object keys\n        a[key] = replaceEqualDeep(a[key], b[key])\n      }\n    }\n  }\n\n  return isSameObject ? a : b\n}\n\n/**\n * it will replace any equal shallow children of `b` with those of `a`.\n * This can be used for structural sharing between JSON values for example.\n */\nexport function replaceShallowEqualDeep<T>(a: unknown, b: T): T\nexport function replaceShallowEqualDeep(a: any, b: any) {\n  if (a === b) return a\n\n  const array = Array.isArray(a) && Array.isArray(b)\n  const isSameObject = array || (isPlainObject(a) && isPlainObject(b))\n\n  if (isSameObject) {\n    if (array) {\n      const bSize = b.length\n      // omit array keys\n      if (a.length > bSize) {\n        a.splice(bSize)\n      }\n\n      // pick array keys\n      for (let i = 0; i < bSize; i++) {\n        a[i] = b[i]\n      }\n    } else {\n      const aKeys = Object.keys(a)\n      const bKeys = Object.keys(b)\n      const hash = new Set(bKeys)\n\n      for (let i = 0, len = aKeys.length; i < len; i++) {\n        const key = aKeys[i]\n        if (!hash.has(key)) {\n          // omit object keys\n          delete a[key]\n        }\n      }\n\n      for (let i = 0, len = bKeys.length; i < len; i++) {\n        const key = bKeys[i]\n        // pick object keys\n        a[key] = b[key]\n      }\n    }\n  }\n\n  return isSameObject ? a : b\n}\n\n// Copied from: https://github.com/jonschlinkert/is-plain-object\nexport function isPlainObject(o: any): o is Object {\n  if (!hasObjectPrototype(o)) {\n    return false\n  }\n\n  // If has modified constructor\n  const ctor = o.constructor\n  if (typeof ctor === 'undefined') {\n    return true\n  }\n\n  // If has modified prototype\n  const prot = ctor.prototype\n  if (!hasObjectPrototype(prot)) {\n    return false\n  }\n\n  // If constructor does not have an Object-specific method\n  if (!prot.hasOwnProperty('isPrototypeOf')) {\n    return false\n  }\n\n  // Most likely a plain Object\n  return true\n}\n\nfunction hasObjectPrototype(o: any): boolean {\n  return Object.prototype.toString.call(o) === '[object Object]'\n}\n\nexport function isQueryKey(value: any): value is QueryKey {\n  return typeof value === 'string' || Array.isArray(value)\n}\n\nexport function isError(value: any): value is Error {\n  return value instanceof Error\n}\n\nexport function sleep(timeout: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, timeout)\n  })\n}\n\nexport function getStatusProps<T extends QueryStatus>(status: T) {\n  return {\n    status,\n    isLoading: status === 'loading',\n    isSuccess: status === 'success',\n    isError: status === 'error',\n    isIdle: status === 'idle',\n  }\n}\n\n/**\n * Schedules a microtask.\n * This can be useful to schedule state updates after rendering.\n */\nexport function scheduleMicrotask(callback: () => void): void {\n  Promise.resolve()\n    .then(callback)\n    .catch(error =>\n      setTimeout(() => {\n        throw error\n      })\n    )\n}\n\n/**\n * it will deeply unwrap the value of ref from ref\n */\nexport function unwrapRefs(refs: any) {\n  if (isRef(refs)) {\n    return refs.value\n  }\n\n  if (typeof refs === 'function') return refs\n\n  const array = Array.isArray(refs)\n\n  if (array || isPlainObject(refs)) {\n    const items = array ? refs : Object.keys(refs)\n    const size = items.length\n    const copy: any = array ? [] : {}\n\n    for (let i = 0; i < size; i++) {\n      const key = array ? i : items[i]\n\n      copy[key] = isRef(refs[key]) ? refs[key].value : unwrapRefs(refs[key])\n    }\n    return copy\n  }\n\n  return refs\n}\n","import { noop } from './utils'\n\n// TYPES\n\nexport interface Logger {\n  log: LogFunction\n  warn: LogFunction\n  error: LogFunction\n}\n\ntype LogFunction = (...args: any[]) => void\n\n// FUNCTIONS\n\nlet logger: Logger = console || {\n  error: noop,\n  warn: noop,\n  log: noop,\n}\n\nexport function getLogger(): Logger {\n  return logger\n}\n\nexport function setLogger(newLogger: Logger) {\n  logger = newLogger\n}\n","type Listener = () => void\n\nexport class Subscribable<TListener extends Function = Listener> {\n  protected listeners: TListener[]\n\n  constructor() {\n    this.listeners = []\n  }\n\n  subscribe(listener?: TListener): () => void {\n    const callback = listener || (() => undefined)\n\n    this.listeners.push(callback as TListener)\n\n    this.onSubscribe()\n\n    return () => {\n      this.listeners = this.listeners.filter(x => x !== callback)\n      this.onUnsubscribe()\n    }\n  }\n\n  hasListeners(): boolean {\n    return this.listeners.length > 0\n  }\n\n  protected onSubscribe(): void {\n    // Do nothing\n  }\n\n  protected onUnsubscribe(): void {\n    // Do nothing\n  }\n}\n","import { Subscribable } from './subscribable'\nimport { isServer } from './utils'\n\nclass FocusManager extends Subscribable {\n  private focused?: boolean\n  private removeEventListener?: () => void\n\n  protected onSubscribe(): void {\n    if (!this.removeEventListener) {\n      this.setDefaultEventListener()\n    }\n  }\n\n  setEventListener(\n    setup: (onFocus: () => void) => (focused?: boolean) => void\n  ): void {\n    if (this.removeEventListener) {\n      this.removeEventListener()\n    }\n    this.removeEventListener = setup((focused?: boolean) => {\n      if (typeof focused === 'boolean') {\n        this.setFocused(focused)\n      } else {\n        this.onFocus()\n      }\n    })\n  }\n\n  setFocused(focused?: boolean): void {\n    this.focused = focused\n\n    if (focused) {\n      this.onFocus()\n    }\n  }\n\n  onFocus(): void {\n    this.listeners.forEach(listener => {\n      listener()\n    })\n  }\n\n  isFocused(): boolean {\n    if (typeof this.focused === 'boolean') {\n      return this.focused\n    }\n\n    // document global can be unavailable in react native\n    if (typeof document === 'undefined') {\n      return true\n    }\n\n    return [undefined, 'visible', 'prerender'].includes(\n      document.visibilityState\n    )\n  }\n\n  private setDefaultEventListener() {\n    if (!isServer && window?.addEventListener) {\n      this.setEventListener(onFocus => {\n        // Listen to visibillitychange and focus\n        window.addEventListener('visibilitychange', onFocus, false)\n        window.addEventListener('focus', onFocus, false)\n\n        return () => {\n          // Be sure to unsubscribe if a new handler is set\n          window.removeEventListener('visibilitychange', onFocus)\n          window.removeEventListener('focus', onFocus)\n        }\n      })\n    }\n  }\n}\n\nexport const focusManager = new FocusManager()\n","import { Subscribable } from './subscribable'\nimport { isServer } from './utils'\n\nclass OnlineManager extends Subscribable {\n  private online?: boolean\n  private removeEventListener?: () => void\n\n  protected onSubscribe(): void {\n    if (!this.removeEventListener) {\n      this.setDefaultEventListener()\n    }\n  }\n\n  setEventListener(\n    setup: (setOnline: () => void) => (online?: boolean) => void\n  ): void {\n    if (this.removeEventListener) {\n      this.removeEventListener()\n    }\n    this.removeEventListener = setup((online?: boolean) => {\n      if (typeof online === 'boolean') {\n        this.setOnline(online)\n      } else {\n        this.onOnline()\n      }\n    })\n  }\n\n  setOnline(online?: boolean): void {\n    this.online = online\n\n    if (online) {\n      this.onOnline()\n    }\n  }\n\n  onOnline(): void {\n    this.listeners.forEach(listener => {\n      listener()\n    })\n  }\n\n  isOnline(): boolean {\n    if (typeof this.online === 'boolean') {\n      return this.online\n    }\n\n    return navigator.onLine === undefined || navigator.onLine\n  }\n\n  private setDefaultEventListener() {\n    if (!isServer && window?.addEventListener) {\n      this.setEventListener(onOnline => {\n        // Listen to online\n        window.addEventListener('online', onOnline, false)\n\n        return () => {\n          // Be sure to unsubscribe if a new handler is set\n          window.removeEventListener('online', onOnline)\n        }\n      })\n    }\n  }\n}\n\nexport const onlineManager = new OnlineManager()\n","import { focusManager } from './focusManager'\nimport { onlineManager } from './onlineManager'\nimport { functionalUpdate, sleep } from './utils'\n\n// TYPES\n\ninterface RetryerConfig<TData = unknown, TError = unknown> {\n  fn: () => TData | Promise<TData>\n  onFail?: (failureCount: number, error: TError) => void\n  onPause?: () => void\n  onContinue?: () => void\n  retry?: RetryValue<TError>\n  retryDelay?: RetryDelayValue\n}\n\nexport type RetryValue<TError> = boolean | number | ShouldRetryFunction<TError>\n\ntype ShouldRetryFunction<TError = unknown> = (\n  failureCount: number,\n  error: TError\n) => boolean\n\nexport type RetryDelayValue = number | RetryDelayFunction\n\ntype RetryDelayFunction = (failureCount: number) => number\n\nfunction defaultRetryDelay(failureCount: number) {\n  return Math.min(1000 * 2 ** failureCount, 30000)\n}\n\ninterface Cancelable {\n  cancel(): void\n}\n\nexport function isCancelable(value: any): value is Cancelable {\n  return typeof value?.cancel === 'function'\n}\n\nexport interface CancelOptions {\n  revert?: boolean\n  silent?: boolean\n}\n\nexport class CancelledError {\n  revert?: boolean\n  silent?: boolean\n  constructor(options?: CancelOptions) {\n    this.revert = options?.revert\n    this.silent = options?.silent\n  }\n}\n\nexport function isCancelledError(value: any): value is CancelledError {\n  return value instanceof CancelledError\n}\n\n// CLASS\n\nexport class Retryer<TData = unknown, TError = unknown> {\n  cancel: (options?: CancelOptions) => void\n  cancelRetry: () => void\n  continue: () => void\n  failureCount: number\n  isPaused: boolean\n  isResolved: boolean\n  isTransportCancelable: boolean\n  promise: Promise<TData>\n\n  constructor(config: RetryerConfig<TData, TError>) {\n    let cancelRetry = false\n    let cancelFn: ((options?: CancelOptions) => void) | undefined\n    let continueFn: ((value?: unknown) => void) | undefined\n    let promiseResolve: (data: TData) => void\n    let promiseReject: (error: TError) => void\n\n    this.cancel = cancelOptions => cancelFn?.(cancelOptions)\n    this.cancelRetry = () => {\n      cancelRetry = true\n    }\n    this.continue = () => continueFn?.()\n    this.failureCount = 0\n    this.isPaused = false\n    this.isResolved = false\n    this.isTransportCancelable = false\n    this.promise = new Promise<TData>((outerResolve, outerReject) => {\n      promiseResolve = outerResolve\n      promiseReject = outerReject\n    })\n\n    const resolve = (value: any) => {\n      this.isResolved = true\n      continueFn?.()\n      promiseResolve(value)\n    }\n\n    const reject = (value: any) => {\n      this.isResolved = true\n      continueFn?.()\n      promiseReject(value)\n    }\n\n    const pause = () => {\n      return new Promise(continueResolve => {\n        continueFn = continueResolve\n        this.isPaused = true\n        config.onPause?.()\n      }).then(() => {\n        continueFn = undefined\n        this.isPaused = false\n        config.onContinue?.()\n      })\n    }\n\n    // Create loop function\n    const run = () => {\n      // Do nothing if already resolved\n      if (this.isResolved) {\n        return\n      }\n\n      let promiseOrValue: any\n\n      // Execute query\n      try {\n        promiseOrValue = config.fn()\n      } catch (error) {\n        promiseOrValue = Promise.reject(error)\n      }\n\n      // Create callback to cancel this fetch\n      cancelFn = cancelOptions => {\n        reject(new CancelledError(cancelOptions))\n\n        // Cancel transport if supported\n        if (isCancelable(promiseOrValue)) {\n          try {\n            promiseOrValue.cancel()\n          } catch {}\n        }\n      }\n\n      // Check if the transport layer support cancellation\n      this.isTransportCancelable = isCancelable(promiseOrValue)\n\n      Promise.resolve(promiseOrValue)\n        .then(resolve)\n        .catch(error => {\n          // Stop if the fetch is already resolved\n          if (this.isResolved) {\n            return\n          }\n\n          // Do we need to retry the request?\n          const retry = config.retry ?? 3\n          const retryDelay = config.retryDelay ?? defaultRetryDelay\n          const delay = functionalUpdate(retryDelay, this.failureCount) || 0\n          const shouldRetry =\n            retry === true ||\n            (typeof retry === 'number' && this.failureCount < retry) ||\n            (typeof retry === 'function' && retry(this.failureCount, error))\n\n          if (cancelRetry || !shouldRetry) {\n            // We are done if the query does not need to be retried\n            reject(error)\n            return\n          }\n\n          this.failureCount++\n\n          // Notify on fail\n          config.onFail?.(this.failureCount, error)\n\n          // Delay\n          sleep(delay)\n            // Pause if the document is not visible or when the device is offline\n            .then(() => {\n              if (!focusManager.isFocused() || !onlineManager.isOnline()) {\n                return pause()\n              }\n            })\n            .then(() => {\n              if (cancelRetry) {\n                reject(error)\n              } else {\n                run()\n              }\n            })\n        })\n    }\n\n    // Start loop\n    run()\n  }\n}\n","import { reactive, readonly } from 'vue'\n\nimport {\n  Updater,\n  ensureArray,\n  functionalUpdate,\n  isValidTimeout,\n  noop,\n  replaceEqualDeep,\n  timeUntilStale,\n} from './utils'\nimport type {\n  InitialDataFunction,\n  QueryKey,\n  QueryOptions,\n  QueryStatus,\n  QueryFunctionContext,\n} from './types'\nimport type { QueryCache } from './queryCache'\nimport type { QueryObserver } from './queryObserver'\nimport { getLogger } from './logger'\nimport { Retryer, CancelOptions, isCancelledError } from './retryer'\n\n// TYPES\n\ninterface QueryConfig<TQueryFnData, TError, TData> {\n  cache: QueryCache\n  queryKey: QueryKey\n  queryHash: string\n  options?: QueryOptions<TQueryFnData, TError, TData>\n  defaultOptions?: QueryOptions<TQueryFnData, TError, TData>\n  state?: QueryState<TData, TError>\n}\n\nexport interface QueryState<TData = unknown, TError = unknown> {\n  data: TData | undefined\n  dataUpdateCount: number\n  dataUpdatedAt: number\n  error: TError | null\n  errorUpdateCount: number\n  errorUpdatedAt: number\n  fetchFailureCount: number\n  fetchMeta: any\n  isFetching: boolean\n  isInvalidated: boolean\n  isPaused: boolean\n  status: QueryStatus\n}\n\nexport interface FetchContext<TQueryFnData, TError, TData> {\n  fetchFn: () => unknown | Promise<unknown>\n  fetchOptions?: FetchOptions\n  options: QueryOptions<TQueryFnData, TError, TData>\n  queryKey: QueryKey\n  state: QueryState<TData, TError>\n}\n\nexport interface QueryBehavior<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData\n> {\n  onFetch: (context: FetchContext<TQueryFnData, TError, TData>) => void\n}\n\nexport interface FetchOptions {\n  cancelRefetch?: boolean\n  meta?: any\n}\n\nexport interface SetDataOptions {\n  updatedAt?: number\n}\n\ninterface FailedAction {\n  type: 'failed'\n}\n\ninterface FetchAction {\n  type: 'fetch'\n  meta?: any\n}\n\ninterface SuccessAction<TData> {\n  data: TData | undefined\n  type: 'success'\n  dataUpdatedAt?: number\n}\n\ninterface ErrorAction<TError> {\n  type: 'error'\n  error: TError\n}\n\ninterface InvalidateAction {\n  type: 'invalidate'\n}\n\ninterface PauseAction {\n  type: 'pause'\n}\n\ninterface ContinueAction {\n  type: 'continue'\n}\n\ninterface SetStateAction<TData, TError> {\n  type: 'setState'\n  state: QueryState<TData, TError>\n}\n\nexport type Action<TData, TError> =\n  | ContinueAction\n  | ErrorAction<TError>\n  | FailedAction\n  | FetchAction\n  | InvalidateAction\n  | PauseAction\n  | SetStateAction<TData, TError>\n  | SuccessAction<TData>\n\n// CLASS\n\nexport class Query<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData\n> {\n  queryKey: QueryKey\n  queryHash: string\n  options!: QueryOptions<TQueryFnData, TError, TData>\n  initialState: QueryState<TData, TError>\n  state: QueryState<TData, TError>\n  cacheTime!: number\n\n  private innerState: QueryState<TData, TError>\n  private cache: QueryCache\n  private promise?: Promise<TData>\n  private gcTimeout?: number\n  private retryer?: Retryer<unknown, TError>\n  private observers: QueryObserver<any, any, any, any>[]\n  private defaultOptions?: QueryOptions<TQueryFnData, TError, TData>\n\n  constructor(config: QueryConfig<TQueryFnData, TError, TData>) {\n    this.defaultOptions = config.defaultOptions\n    this.setOptions(config.options)\n    this.observers = []\n    this.cache = config.cache\n    this.queryKey = config.queryKey\n    this.queryHash = config.queryHash\n    this.initialState = config.state || this.getDefaultState(this.options)\n    this.innerState = reactive(this.initialState) as QueryState<TData, TError>\n    this.state = readonly(this.innerState) as QueryState<TData, TError>\n    this.scheduleGc()\n  }\n\n  private setOptions(\n    options?: QueryOptions<TQueryFnData, TError, TData>\n  ): void {\n    this.options = { ...this.defaultOptions, ...options }\n\n    // Default to 5 minutes if not cache time is set\n    this.cacheTime = Math.max(\n      this.cacheTime || 0,\n      this.options.cacheTime ?? 5 * 60 * 1000\n    )\n  }\n\n  setDefaultOptions(options: QueryOptions<TQueryFnData, TError, TData>): void {\n    this.defaultOptions = options\n  }\n\n  private scheduleGc(): void {\n    this.clearGcTimeout()\n\n    if (isValidTimeout(this.cacheTime)) {\n      this.gcTimeout = setTimeout(() => {\n        this.optionalRemove()\n      }, this.cacheTime)\n    }\n  }\n\n  private clearGcTimeout() {\n    clearTimeout(this.gcTimeout)\n    this.gcTimeout = undefined\n  }\n\n  private optionalRemove() {\n    if (!this.observers.length && !this.state.isFetching) {\n      this.cache.remove(this)\n    }\n  }\n\n  setData(\n    updater: Updater<TData | undefined, TData>,\n    options?: SetDataOptions\n  ): TData {\n    const prevData = this.innerState.data\n\n    // Get the new data\n    let data = functionalUpdate(updater, prevData)\n\n    // Use prev data if an isDataEqual function is defined and returns `true`\n    if (this.options.isDataEqual?.(prevData, data)) {\n      data = prevData as TData\n    } else if (this.options.structuralSharing !== false) {\n      // Structurally share data between prev and new data if needed\n      data = replaceEqualDeep(prevData, data)\n    }\n\n    // Set data and mark it as cached\n    this.dispatch({\n      data,\n      type: 'success',\n      dataUpdatedAt: options?.updatedAt,\n    })\n\n    return data\n  }\n\n  setState(state: QueryState<TData, TError>): void {\n    this.dispatch({ type: 'setState', state })\n  }\n\n  cancel(options?: CancelOptions): Promise<void> {\n    const promise = this.promise\n    this.retryer?.cancel(options)\n    return promise ? promise.then(noop).catch(noop) : Promise.resolve()\n  }\n\n  destroy(): void {\n    this.clearGcTimeout()\n    this.cancel()\n  }\n\n  reset(): void {\n    this.destroy()\n    this.setState(this.initialState)\n  }\n\n  isActive(): boolean {\n    return this.observers.some(observer => observer.options.enabled !== false)\n  }\n\n  isFetching(): boolean {\n    return this.state.isFetching\n  }\n\n  isStale(): boolean {\n    return (\n      this.state.isInvalidated ||\n      !this.state.dataUpdatedAt ||\n      this.observers.some(observer => observer.getReadonlyResult().isStale)\n    )\n  }\n\n  isStaleByTime(staleTime = 0): boolean {\n    return (\n      this.state.isInvalidated ||\n      !this.state.dataUpdatedAt ||\n      !timeUntilStale(this.state.dataUpdatedAt, staleTime)\n    )\n  }\n\n  onFocus(): void {\n    const observer = this.observers.find(x => x.willFetchOnWindowFocus())\n\n    if (observer) {\n      observer.refetch()\n    }\n\n    // Continue fetch if currently paused\n    this.retryer?.continue()\n  }\n\n  onOnline(): void {\n    const observer = this.observers.find(x => x.willFetchOnReconnect())\n\n    if (observer) {\n      observer.refetch()\n    }\n\n    // Continue fetch if currently paused\n    this.retryer?.continue()\n  }\n\n  addObserver(observer: QueryObserver<any, any, any, any>): void {\n    if (this.observers.indexOf(observer) === -1) {\n      this.observers.push(observer)\n\n      // Stop the query from being garbage collected\n      this.clearGcTimeout()\n\n      this.cache.notify(this)\n    }\n  }\n\n  removeObserver(observer: QueryObserver<any, any, any, any>): void {\n    if (this.observers.indexOf(observer) !== -1) {\n      this.observers = this.observers.filter(x => x !== observer)\n\n      if (!this.observers.length) {\n        // If the transport layer does not support cancellation\n        // we'll let the query continue so the result can be cached\n        if (this.retryer) {\n          if (this.retryer.isTransportCancelable) {\n            this.retryer.cancel()\n          } else {\n            this.retryer.cancelRetry()\n          }\n        }\n\n        if (this.cacheTime) {\n          this.scheduleGc()\n        } else {\n          this.cache.remove(this)\n        }\n      }\n\n      this.cache.notify(this)\n    }\n  }\n\n  invalidate(): void {\n    if (!this.state.isInvalidated) {\n      this.dispatch({ type: 'invalidate' })\n    }\n  }\n\n  fetch(\n    options?: QueryOptions<TQueryFnData, TError, TData>,\n    fetchOptions?: FetchOptions\n  ): Promise<TData> {\n    if (this.state.isFetching)\n      if (this.state.dataUpdatedAt && fetchOptions?.cancelRefetch) {\n        // Silently cancel current fetch if the user wants to cancel refetches\n        this.cancel({ silent: true })\n      } else if (this.promise) {\n        // Return current promise if we are already fetching\n        return this.promise\n      }\n\n    // Update config if passed, otherwise the config from the last execution is used\n    if (options) {\n      this.setOptions(options)\n    }\n\n    // Use the options from the first observer with a query function if no function is found.\n    // This can happen when the query is hydrated or created with setQueryData.\n    if (!this.options.queryFn) {\n      const observer = this.observers.find(x => x.options.queryFn)\n      if (observer) {\n        this.setOptions(observer.options)\n      }\n    }\n\n    // Create query function context\n    const queryKey = ensureArray(this.queryKey)\n    const queryFnContext: QueryFunctionContext = {\n      queryKey,\n      pageParam: undefined,\n    }\n\n    // Create fetch function\n    const fetchFn = () =>\n      this.options.queryFn\n        ? this.options.queryFn(queryFnContext)\n        : Promise.reject('Missing queryFn')\n\n    // Trigger behavior hook\n    const context: FetchContext<TQueryFnData, TError, TData> = {\n      fetchOptions,\n      options: this.options,\n      queryKey,\n      state: this.state,\n      fetchFn,\n    }\n\n    if (this.options.behavior?.onFetch) {\n      this.options.behavior?.onFetch(context)\n    }\n\n    // Set to fetching state if not already in it\n    if (\n      !this.state.isFetching ||\n      this.state.fetchMeta !== context.fetchOptions?.meta\n    ) {\n      this.dispatch({ type: 'fetch', meta: context.fetchOptions?.meta })\n    }\n\n    // Try to fetch the data\n    this.retryer = new Retryer({\n      fn: context.fetchFn,\n      onFail: () => {\n        this.dispatch({ type: 'failed' })\n      },\n      onPause: () => {\n        this.dispatch({ type: 'pause' })\n      },\n      onContinue: () => {\n        this.dispatch({ type: 'continue' })\n      },\n      retry: context.options.retry,\n      retryDelay: context.options.retryDelay,\n    })\n\n    this.promise = this.retryer.promise\n      .then(data => this.setData(data as TData))\n      .catch(error => {\n        // Set error state if needed\n        if (!(isCancelledError(error) && error.silent)) {\n          this.dispatch({\n            type: 'error',\n            error,\n          })\n        }\n\n        // Log error\n        if (!isCancelledError(error)) {\n          getLogger().error(error)\n        }\n\n        // Propagate error\n        throw error\n      })\n      .finally(() => {\n        // Remove query after fetching if cache time is 0\n        if (this.cacheTime === 0) {\n          this.optionalRemove()\n        }\n      })\n\n    return this.promise\n  }\n\n  private dispatch(action: Action<TData, TError>): void {\n    Object.assign(this.innerState, this.reducer(this.state, action))\n\n    this.observers.forEach(observer => {\n      observer.onQueryUpdate(action)\n    })\n\n    this.cache.notify(this)\n  }\n\n  protected getDefaultState(\n    options: QueryOptions<TQueryFnData, TError, TData>\n  ): QueryState<TData, TError> {\n    const data =\n      typeof options.initialData === 'function'\n        ? (options.initialData as InitialDataFunction<TData>)()\n        : options.initialData\n\n    const hasData = typeof data !== 'undefined'\n\n    return {\n      data,\n      dataUpdateCount: 0,\n      dataUpdatedAt: hasData ? Date.now() : 0,\n      error: null,\n      errorUpdateCount: 0,\n      errorUpdatedAt: 0,\n      fetchFailureCount: 0,\n      fetchMeta: null,\n      isFetching: false,\n      isInvalidated: false,\n      isPaused: false,\n      status: hasData ? 'success' : 'idle',\n    }\n  }\n\n  protected reducer(\n    state: QueryState<TData, TError>,\n    action: Action<TData, TError>\n  ): QueryState<TData, TError> {\n    switch (action.type) {\n      case 'failed':\n        return {\n          ...state,\n          fetchFailureCount: state.fetchFailureCount + 1,\n        }\n      case 'pause':\n        return {\n          ...state,\n          isPaused: true,\n        }\n      case 'continue':\n        return {\n          ...state,\n          isPaused: false,\n        }\n      case 'fetch':\n        return {\n          ...state,\n          fetchFailureCount: 0,\n          fetchMeta: action.meta ?? null,\n          isFetching: true,\n          isPaused: false,\n          status: state.status === 'idle' ? 'loading' : state.status,\n        }\n      case 'success':\n        return {\n          ...state,\n          data: action.data,\n          dataUpdateCount: state.dataUpdateCount + 1,\n          dataUpdatedAt: action.dataUpdatedAt ?? Date.now(),\n          error: null,\n          fetchFailureCount: 0,\n          isFetching: false,\n          isInvalidated: false,\n          isPaused: false,\n          status: 'success',\n        }\n      case 'error':\n        const error = action.error as unknown\n\n        if (isCancelledError(error) && error.revert) {\n          return {\n            ...state,\n            fetchFailureCount: 0,\n            isFetching: false,\n            isPaused: false,\n            status: state.status === 'loading' ? 'idle' : state.status,\n          }\n        }\n\n        return {\n          ...state,\n          error: error as TError,\n          errorUpdateCount: state.errorUpdateCount + 1,\n          errorUpdatedAt: Date.now(),\n          fetchFailureCount: state.fetchFailureCount + 1,\n          isFetching: false,\n          isPaused: false,\n          status: 'error',\n        }\n      case 'invalidate':\n        return {\n          ...state,\n          isInvalidated: true,\n        }\n      case 'setState':\n        return {\n          ...state,\n          ...action.state,\n        }\n      default:\n        return state\n    }\n  }\n}\n","import {\n  QueryFilters,\n  getQueryKeyHashFn,\n  matchQuery,\n  parseFilterArgs,\n} from './utils'\nimport { Query, QueryState } from './query'\nimport type { QueryKeyWithRef, QueryOptions } from './types'\nimport type { QueryClient } from './queryClient'\nimport { Subscribable } from './subscribable'\n\n// TYPES\n\ninterface QueryHashMap {\n  [hash: string]: Query<any, any>\n}\n\ntype QueryCacheListener = (query?: Query) => void\n\n// CLASS\n\nexport class QueryCache extends Subscribable<QueryCacheListener> {\n  private queries: Query<any, any>[]\n  private queriesMap: QueryHashMap\n\n  constructor() {\n    super()\n\n    this.queries = []\n    this.queriesMap = {}\n  }\n\n  build<TQueryFnData, TError, TData>(\n    client: QueryClient,\n    options: QueryOptions<TQueryFnData, TError, TData>,\n    state?: QueryState<TData, TError>\n  ): Query<TQueryFnData, TError, TData> {\n    const hashFn = getQueryKeyHashFn(options)\n    const queryKey = options.queryKey!\n    const queryHash = options.queryHash ?? hashFn(queryKey)\n    let query = this.get<TQueryFnData, TError, TData>(queryHash)\n\n    if (!query) {\n      query = new Query({\n        cache: this,\n        queryKey,\n        queryHash,\n        options: client.defaultQueryOptions(options),\n        state,\n        defaultOptions: client.getQueryDefaults(queryKey),\n      })\n      this.add(query)\n    }\n\n    return query\n  }\n\n  add(query: Query<any, any>): void {\n    if (!this.queriesMap[query.queryHash]) {\n      this.queriesMap[query.queryHash] = query\n      this.queries.push(query)\n      this.notify(query)\n    }\n  }\n\n  remove(query: Query<any, any>): void {\n    const queryInMap = this.queriesMap[query.queryHash]\n\n    if (queryInMap) {\n      query.destroy()\n\n      this.queries = this.queries.filter(x => x !== query)\n\n      if (queryInMap === query) {\n        delete this.queriesMap[query.queryHash]\n      }\n\n      this.notify(query)\n    }\n  }\n\n  clear(): void {\n    this.queries.forEach(query => {\n      this.remove(query)\n    })\n  }\n\n  get<TQueryFnData = unknown, TError = unknown, TData = TQueryFnData>(\n    queryHash: string\n  ): Query<TQueryFnData, TError, TData> | undefined {\n    return this.queriesMap[queryHash]\n  }\n\n  getAll(): Query[] {\n    return this.queries\n  }\n\n  find<TQueryFnData = unknown, TError = unknown, TData = TQueryFnData>(\n    arg1: QueryKeyWithRef,\n    arg2?: QueryFilters\n  ): Query<TQueryFnData, TError, TData> | undefined {\n    const [filters] = parseFilterArgs(arg1, arg2)\n    return this.queries.find(query => matchQuery(filters, query))\n  }\n\n  findAll(queryKey?: QueryKeyWithRef, filters?: QueryFilters): Query[]\n  findAll(filters?: QueryFilters): Query[]\n  findAll(arg1?: QueryKeyWithRef | QueryFilters, arg2?: QueryFilters): Query[]\n  findAll(arg1?: QueryKeyWithRef | QueryFilters, arg2?: QueryFilters): Query[] {\n    const [filters] = parseFilterArgs(arg1, arg2)\n    return filters\n      ? this.queries.filter(query => matchQuery(filters, query))\n      : this.queries\n  }\n\n  notify(query?: Query<any, any>) {\n    this.listeners.forEach(listener => {\n      listener(query)\n    })\n  }\n\n  onFocus(): void {\n    this.queries.forEach(query => {\n      query.onFocus()\n    })\n  }\n\n  onOnline(): void {\n    this.queries.forEach(query => {\n      query.onOnline()\n    })\n  }\n}\n","import type { MutationOptions, MutationStatus } from './types'\nimport type { MutationCache } from './mutationCache'\nimport type { MutationObserver } from './mutationObserver'\nimport { getLogger } from './logger'\nimport { Retryer } from './retryer'\nimport { noop } from './utils'\n\n// TYPES\n\ninterface MutationConfig<TData, TError, TVariables, TContext> {\n  mutationId: number\n  mutationCache: MutationCache\n  options: MutationOptions<TData, TError, TVariables, TContext>\n  defaultOptions?: MutationOptions<TData, TError, TVariables, TContext>\n  state?: MutationState<TData, TError, TVariables, TContext>\n}\n\nexport interface MutationState<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown\n> {\n  context: TContext | undefined\n  data: TData | undefined\n  error: TError | null\n  failureCount: number\n  isPaused: boolean\n  status: MutationStatus\n  variables: TVariables | undefined\n}\n\ninterface FailedAction {\n  type: 'failed'\n}\n\ninterface LoadingAction<TVariables, TContext> {\n  type: 'loading'\n  variables?: TVariables\n  context?: TContext\n}\n\ninterface SuccessAction<TData> {\n  type: 'success'\n  data: TData\n}\n\ninterface ErrorAction<TError> {\n  type: 'error'\n  error: TError\n}\n\ninterface PauseAction {\n  type: 'pause'\n}\n\ninterface ContinueAction {\n  type: 'continue'\n}\n\ninterface SetStateAction<TData, TError, TVariables, TContext> {\n  type: 'setState'\n  state: MutationState<TData, TError, TVariables, TContext>\n}\n\nexport type Action<TData, TError, TVariables, TContext> =\n  | ContinueAction\n  | ErrorAction<TError>\n  | FailedAction\n  | LoadingAction<TVariables, TContext>\n  | PauseAction\n  | SetStateAction<TData, TError, TVariables, TContext>\n  | SuccessAction<TData>\n\n// CLASS\n\nexport class Mutation<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown\n> {\n  state: MutationState<TData, TError, TVariables, TContext>\n  options: MutationOptions<TData, TError, TVariables, TContext>\n  mutationId: number\n\n  private observers: MutationObserver<TData, TError, TVariables, TContext>[]\n  private mutationCache: MutationCache\n  private retryer?: Retryer<TData, TError>\n\n  constructor(config: MutationConfig<TData, TError, TVariables, TContext>) {\n    this.options = {\n      ...config.defaultOptions,\n      ...config.options,\n    }\n    this.mutationId = config.mutationId\n    this.mutationCache = config.mutationCache\n    this.observers = []\n    this.state = config.state || getDefaultState()\n  }\n\n  setState(state: MutationState<TData, TError, TVariables, TContext>): void {\n    this.dispatch({ type: 'setState', state })\n  }\n\n  addObserver(observer: MutationObserver<any, any, any, any>): void {\n    if (this.observers.indexOf(observer) === -1) {\n      this.observers.push(observer)\n    }\n  }\n\n  removeObserver(observer: MutationObserver<any, any, any, any>): void {\n    this.observers = this.observers.filter(x => x !== observer)\n  }\n\n  cancel(): Promise<void> {\n    if (this.retryer) {\n      this.retryer.cancel()\n      return this.retryer.promise.then(noop).catch(noop)\n    }\n    return Promise.resolve()\n  }\n\n  continue(): Promise<TData> {\n    if (this.retryer) {\n      this.retryer.continue()\n      return this.retryer.promise\n    }\n    return this.execute()\n  }\n\n  execute(): Promise<TData> {\n    let data: TData\n\n    const restored = this.state.status === 'loading'\n\n    let promise = Promise.resolve()\n\n    if (!restored) {\n      this.dispatch({ type: 'loading', variables: this.options.variables! })\n      promise = promise\n        .then(() => this.options.onMutate?.(this.state.variables!))\n        .then(context => {\n          if (context !== this.state.context) {\n            this.dispatch({\n              type: 'loading',\n              context,\n              variables: this.state.variables,\n            })\n          }\n        })\n    }\n\n    return promise\n      .then(() => this.executeMutation())\n      .then(result => {\n        data = result\n      })\n      .then(() =>\n        this.options.onSuccess?.(\n          data,\n          this.state.variables!,\n          this.state.context!\n        )\n      )\n      .then(() =>\n        this.options.onSettled?.(\n          data,\n          null,\n          this.state.variables!,\n          this.state.context\n        )\n      )\n      .then(() => {\n        this.dispatch({ type: 'success', data })\n        return data\n      })\n      .catch(error => {\n        getLogger().error(error)\n        return Promise.resolve()\n          .then(() =>\n            this.options.onError?.(\n              error,\n              this.state.variables!,\n              this.state.context\n            )\n          )\n          .then(() =>\n            this.options.onSettled?.(\n              undefined,\n              error,\n              this.state.variables!,\n              this.state.context\n            )\n          )\n          .then(() => {\n            this.dispatch({ type: 'error', error })\n            throw error\n          })\n      })\n  }\n\n  private executeMutation(): Promise<TData> {\n    this.retryer = new Retryer({\n      fn: () => {\n        if (!this.options.mutationFn) {\n          return Promise.reject('No mutationFn found')\n        }\n        return this.options.mutationFn(this.state.variables!)\n      },\n      onFail: () => {\n        this.dispatch({ type: 'failed' })\n      },\n      onPause: () => {\n        this.dispatch({ type: 'pause' })\n      },\n      onContinue: () => {\n        this.dispatch({ type: 'continue' })\n      },\n      retry: this.options.retry ?? 0,\n      retryDelay: this.options.retryDelay,\n    })\n\n    return this.retryer.promise\n  }\n\n  private dispatch(action: Action<TData, TError, TVariables, TContext>): void {\n    this.state = reducer(this.state, action)\n\n    this.observers.forEach(observer => {\n      observer.onMutationUpdate(action)\n    })\n    this.mutationCache.notify(this)\n  }\n}\n\nexport function getDefaultState<\n  TData,\n  TError,\n  TVariables,\n  TContext\n>(): MutationState<TData, TError, TVariables, TContext> {\n  return {\n    context: undefined,\n    data: undefined,\n    error: null,\n    failureCount: 0,\n    isPaused: false,\n    status: 'idle',\n    variables: undefined,\n  }\n}\n\nfunction reducer<TData, TError, TVariables, TContext>(\n  state: MutationState<TData, TError, TVariables, TContext>,\n  action: Action<TData, TError, TVariables, TContext>\n): MutationState<TData, TError, TVariables, TContext> {\n  switch (action.type) {\n    case 'failed':\n      return {\n        ...state,\n        failureCount: state.failureCount + 1,\n      }\n    case 'pause':\n      return {\n        ...state,\n        isPaused: true,\n      }\n    case 'continue':\n      return {\n        ...state,\n        isPaused: false,\n      }\n    case 'loading':\n      return {\n        ...state,\n        context: action.context,\n        data: undefined,\n        error: null,\n        isPaused: false,\n        status: 'loading',\n        variables: action.variables,\n      }\n    case 'success':\n      return {\n        ...state,\n        data: action.data,\n        error: null,\n        status: 'success',\n        isPaused: false,\n      }\n    case 'error':\n      return {\n        ...state,\n        data: undefined,\n        error: action.error,\n        failureCount: state.failureCount + 1,\n        isPaused: false,\n        status: 'error',\n      }\n    case 'setState':\n      return {\n        ...state,\n        ...action.state,\n      }\n    default:\n      return state\n  }\n}\n","import type { MutationOptions } from './types'\nimport type { QueryClient } from './queryClient'\nimport { Mutation, MutationState } from './mutation'\nimport { noop } from './utils'\nimport { Subscribable } from './subscribable'\n\n// TYPES\n\ntype MutationCacheListener = (mutation?: Mutation) => void\n\n// CLASS\n\nexport class MutationCache extends Subscribable<MutationCacheListener> {\n  private mutations: Mutation<any, any, any, any>[]\n  private mutationId: number\n\n  constructor() {\n    super()\n    this.mutations = []\n    this.mutationId = 0\n  }\n\n  build<TData, TError, TVariables, TContext>(\n    client: QueryClient,\n    options: MutationOptions<TData, TError, TVariables, TContext>,\n    state?: MutationState<TData, TError, TVariables, TContext>\n  ): Mutation<TData, TError, TVariables, TContext> {\n    const mutation = new Mutation({\n      mutationCache: this,\n      mutationId: ++this.mutationId,\n      options: client.defaultMutationOptions(options),\n      state,\n      defaultOptions: options.mutationKey\n        ? client.getMutationDefaults(options.mutationKey)\n        : undefined,\n    })\n\n    this.add(mutation)\n\n    return mutation\n  }\n\n  add(mutation: Mutation<any, any, any, any>): void {\n    this.mutations.push(mutation)\n    this.notify(mutation)\n  }\n\n  remove(mutation: Mutation<any, any, any, any>): void {\n    this.mutations = this.mutations.filter(x => x !== mutation)\n    mutation.cancel()\n    this.notify(mutation)\n  }\n\n  clear(): void {\n    this.mutations.forEach(mutation => {\n      this.remove(mutation)\n    })\n  }\n\n  getAll(): Mutation[] {\n    return this.mutations\n  }\n\n  notify(mutation?: Mutation<any, any, any, any>) {\n    this.listeners.forEach(listener => {\n      listener(mutation)\n    })\n  }\n\n  onFocus(): void {\n    this.resumePausedMutations()\n  }\n\n  onOnline(): void {\n    this.resumePausedMutations()\n  }\n\n  resumePausedMutations(): Promise<void> {\n    const pausedMutations = this.mutations.filter(x => x.state.isPaused)\n\n    return pausedMutations.reduce(\n      (promise, mutation) =>\n        promise.then(() => mutation.continue().catch(noop)),\n      Promise.resolve()\n    )\n  }\n}\n","import type { QueryBehavior } from './query'\nimport { isCancelable } from './retryer'\nimport type { InfiniteData, QueryFunctionContext, QueryOptions } from './types'\n\nexport function infiniteQueryBehavior<\n  TQueryFnData,\n  TError,\n  TData\n>(): QueryBehavior<TQueryFnData, TError, InfiniteData<TData>> {\n  return {\n    onFetch: context => {\n      context.fetchFn = () => {\n        const fetchMore = context.fetchOptions?.meta?.fetchMore\n        const pageParam = fetchMore?.pageParam\n        const isFetchingNextPage = fetchMore?.direction === 'forward'\n        const isFetchingPreviousPage = fetchMore?.direction === 'backward'\n        const oldPages = context.state.data?.pages || []\n        const oldPageParams = context.state.data?.pageParams || []\n        let newPageParams = oldPageParams\n\n        // Get query function\n        const queryFn =\n          context.options.queryFn || (() => Promise.reject('Missing queryFn'))\n\n        // Create function to fetch a page\n        const fetchPage = (\n          pages: unknown[],\n          manual?: boolean,\n          param?: unknown,\n          previous?: boolean\n        ): Promise<unknown[]> => {\n          if (typeof param === 'undefined' && !manual && pages.length) {\n            return Promise.resolve(pages)\n          }\n\n          const queryFnContext: QueryFunctionContext = {\n            queryKey: context.queryKey,\n            pageParam: param,\n          }\n\n          let cancelFn: undefined | (() => any)\n          const queryFnResult = queryFn(queryFnContext)\n          if ((queryFnResult as any).cancel) {\n            cancelFn = (queryFnResult as any).cancel\n          }\n\n          const promise = Promise.resolve(queryFnResult).then(page => {\n            newPageParams = previous\n              ? [param, ...newPageParams]\n              : [...newPageParams, param]\n            return previous ? [page, ...pages] : [...pages, page]\n          })\n\n          if (cancelFn) {\n            const promiseAsAny = promise as any\n            promiseAsAny.cancel = cancelFn\n          }\n\n          return promise\n        }\n\n        let promise\n\n        // Fetch first page?\n        if (!oldPages.length) {\n          promise = fetchPage([])\n        }\n\n        // Fetch next page?\n        else if (isFetchingNextPage) {\n          const manual = typeof pageParam !== 'undefined'\n          const param = manual\n            ? pageParam\n            : getNextPageParam(context.options, oldPages)\n          promise = fetchPage(oldPages, manual, param)\n        }\n\n        // Fetch previous page?\n        else if (isFetchingPreviousPage) {\n          const manual = typeof pageParam !== 'undefined'\n          const param = manual\n            ? pageParam\n            : getPreviousPageParam(context.options, oldPages)\n          promise = fetchPage(oldPages, manual, param, true)\n        }\n\n        // Refetch pages\n        else {\n          newPageParams = []\n\n          const manual = typeof context.options.getNextPageParam === 'undefined'\n\n          // Fetch first page\n          promise = fetchPage([], manual, oldPageParams[0])\n\n          // Fetch remaining pages\n          for (let i = 1; i < oldPages.length; i++) {\n            promise = promise.then(pages => {\n              const param = manual\n                ? oldPageParams[i]\n                : getNextPageParam(context.options, pages)\n              return fetchPage(pages, manual, param)\n            })\n          }\n        }\n\n        const finalPromise = promise.then(pages => ({\n          pages,\n          pageParams: newPageParams,\n        }))\n\n        if (isCancelable(promise)) {\n          const finalPromiseAsAny = finalPromise as any\n          finalPromiseAsAny.cancel = promise.cancel\n        }\n\n        return finalPromise\n      }\n    },\n  }\n}\n\nexport function getNextPageParam(\n  options: QueryOptions<any, any>,\n  pages: unknown[]\n): unknown | undefined {\n  return options.getNextPageParam?.(pages[pages.length - 1], pages)\n}\n\nexport function getPreviousPageParam(\n  options: QueryOptions<any, any>,\n  pages: unknown[]\n): unknown | undefined {\n  return options.getPreviousPageParam?.(pages[0], pages)\n}\n\n/**\n * Checks if there is a next page.\n * Returns `undefined` if it cannot be determined.\n */\nexport function hasNextPage(\n  options: QueryOptions<any, any>,\n  pages?: unknown\n): boolean | undefined {\n  if (options.getNextPageParam && Array.isArray(pages)) {\n    const nextPageParam = getNextPageParam(options, pages)\n    return (\n      typeof nextPageParam !== 'undefined' &&\n      nextPageParam !== null &&\n      nextPageParam !== false\n    )\n  }\n}\n\n/**\n * Checks if there is a previous page.\n * Returns `undefined` if it cannot be determined.\n */\nexport function hasPreviousPage(\n  options: QueryOptions<any, any>,\n  pages?: unknown\n): boolean | undefined {\n  if (options.getPreviousPageParam && Array.isArray(pages)) {\n    const previousPageParam = getPreviousPageParam(options, pages)\n    return (\n      typeof previousPageParam !== 'undefined' &&\n      previousPageParam !== null &&\n      previousPageParam !== false\n    )\n  }\n}\n","import {\n  QueryFilters,\n  Updater,\n  hashQueryKey,\n  noop,\n  parseFilterArgs,\n  parseQueryArgs,\n  partialMatchKey,\n} from './utils'\nimport type {\n  DefaultOptions,\n  FetchInfiniteQueryOptions,\n  FetchQueryOptions,\n  InfiniteData,\n  InvalidateOptions,\n  InvalidateQueryFilters,\n  MutationKey,\n  MutationObserverOptions,\n  MutationOptions,\n  QueryFunction,\n  QueryKey,\n  QueryKeyWithRef,\n  QueryObserverOptions,\n  QueryOptions,\n  RefetchOptions,\n  ResetOptions,\n} from './types'\nimport type { QueryState, SetDataOptions } from './query'\nimport { QueryCache } from './queryCache'\nimport { MutationCache } from './mutationCache'\nimport { focusManager } from './focusManager'\nimport { onlineManager } from './onlineManager'\nimport { CancelOptions } from './retryer'\nimport { infiniteQueryBehavior } from './infiniteQueryBehavior'\n\n// TYPES\n\ninterface QueryClientConfig {\n  queryCache?: QueryCache\n  mutationCache?: MutationCache\n  defaultOptions?: DefaultOptions\n}\n\ninterface QueryDefaults {\n  queryKey: QueryKey\n  defaultOptions: QueryOptions<any, any, any>\n}\n\ninterface MutationDefaults {\n  mutationKey: MutationKey\n  defaultOptions: MutationOptions<any, any, any, any>\n}\n\n// CLASS\n\nexport class QueryClient {\n  private queryCache: QueryCache\n  private mutationCache: MutationCache\n  private defaultOptions: DefaultOptions\n  private queryDefaults: QueryDefaults[]\n  private mutationDefaults: MutationDefaults[]\n  private unsubscribeFocus?: () => void\n  private unsubscribeOnline?: () => void\n\n  constructor(config: QueryClientConfig = {}) {\n    this.queryCache = config.queryCache || new QueryCache()\n    this.mutationCache = config.mutationCache || new MutationCache()\n    this.defaultOptions = config.defaultOptions || {}\n    this.queryDefaults = []\n    this.mutationDefaults = []\n  }\n\n  mount(): void {\n    this.unsubscribeFocus = focusManager.subscribe(() => {\n      if (focusManager.isFocused() && onlineManager.isOnline()) {\n        this.mutationCache.onFocus()\n        this.queryCache.onFocus()\n      }\n    })\n    this.unsubscribeOnline = onlineManager.subscribe(() => {\n      if (focusManager.isFocused() && onlineManager.isOnline()) {\n        this.mutationCache.onOnline()\n        this.queryCache.onOnline()\n      }\n    })\n  }\n\n  unmount(): void {\n    this.unsubscribeFocus?.()\n    this.unsubscribeOnline?.()\n  }\n\n  isFetching(filters?: QueryFilters): number\n  isFetching(queryKey?: QueryKeyWithRef, filters?: QueryFilters): number\n  isFetching(\n    arg1?: QueryKeyWithRef | QueryFilters,\n    arg2?: QueryFilters\n  ): number {\n    const [filters] = parseFilterArgs(arg1, arg2)\n    filters.fetching = true\n    return this.queryCache.findAll(filters).length\n  }\n\n  getQueryData<TData = unknown>(\n    queryKey: QueryKey,\n    filters?: QueryFilters\n  ): TData | undefined {\n    return this.queryCache.find<TData>(queryKey, filters)?.state.data\n  }\n\n  setQueryData<TData>(\n    queryKey: QueryKeyWithRef,\n    updater: Updater<TData | undefined, TData>,\n    options?: SetDataOptions\n  ): TData {\n    const parsedOptions = parseQueryArgs(queryKey)\n    const defaultedOptions = this.defaultQueryOptions(parsedOptions)\n    return this.queryCache\n      .build(this, defaultedOptions)\n      .setData(updater, options)\n  }\n\n  getQueryState<TData = unknown, TError = undefined>(\n    queryKey: QueryKeyWithRef,\n    filters?: QueryFilters\n  ): QueryState<TData, TError> | undefined {\n    return this.queryCache.find<TData, TError>(queryKey, filters)?.state\n  }\n\n  removeQueries(filters?: QueryFilters): void\n  removeQueries(queryKey?: QueryKeyWithRef, filters?: QueryFilters): void\n  removeQueries(\n    arg1?: QueryKeyWithRef | QueryFilters,\n    arg2?: QueryFilters\n  ): void {\n    const [filters] = parseFilterArgs(arg1, arg2)\n    const queryCache = this.queryCache\n    queryCache.findAll(filters).forEach(query => {\n      queryCache.remove(query)\n    })\n  }\n\n  resetQueries(filters?: QueryFilters, options?: ResetOptions): Promise<void>\n  resetQueries(\n    queryKey?: QueryKeyWithRef,\n    filters?: QueryFilters,\n    options?: ResetOptions\n  ): Promise<void>\n  resetQueries(\n    arg1?: QueryKeyWithRef | QueryFilters,\n    arg2?: QueryFilters | ResetOptions,\n    arg3?: ResetOptions\n  ): Promise<void> {\n    const [filters, options] = parseFilterArgs(arg1, arg2, arg3)\n    const queryCache = this.queryCache\n\n    const refetchFilters: QueryFilters = {\n      ...filters,\n      active: true,\n    }\n\n    queryCache.findAll(filters).forEach(query => {\n      query.reset()\n    })\n    return this.refetchQueries(refetchFilters, options)\n  }\n\n  cancelQueries(filters?: QueryFilters, options?: CancelOptions): Promise<void>\n  cancelQueries(\n    queryKey?: QueryKeyWithRef,\n    filters?: QueryFilters,\n    options?: CancelOptions\n  ): Promise<void>\n  cancelQueries(\n    arg1?: QueryKeyWithRef | QueryFilters,\n    arg2?: QueryFilters | CancelOptions,\n    arg3?: CancelOptions\n  ): Promise<void> {\n    const [filters, cancelOptions = {}] = parseFilterArgs(arg1, arg2, arg3)\n\n    if (typeof cancelOptions.revert === 'undefined') {\n      cancelOptions.revert = true\n    }\n\n    const promises = this.queryCache\n      .findAll(filters)\n      .map(query => query.cancel(cancelOptions))\n\n    return Promise.all(promises).then(noop).catch(noop)\n  }\n\n  invalidateQueries(\n    filters?: InvalidateQueryFilters,\n    options?: InvalidateOptions\n  ): Promise<void>\n  invalidateQueries(\n    queryKey?: QueryKeyWithRef,\n    filters?: InvalidateQueryFilters,\n    options?: InvalidateOptions\n  ): Promise<void>\n  invalidateQueries(\n    arg1?: QueryKeyWithRef | InvalidateQueryFilters,\n    arg2?: InvalidateQueryFilters | InvalidateOptions,\n    arg3?: InvalidateOptions\n  ): Promise<void> {\n    const [filters, options] = parseFilterArgs(arg1, arg2, arg3)\n\n    const refetchFilters: QueryFilters = {\n      ...filters,\n      active: filters.refetchActive ?? true,\n      inactive: filters.refetchInactive ?? false,\n    }\n\n    this.queryCache.findAll(filters).forEach(query => {\n      query.invalidate()\n    })\n    return this.refetchQueries(refetchFilters, options)\n  }\n\n  refetchQueries(\n    filters?: QueryFilters,\n    options?: RefetchOptions\n  ): Promise<void>\n  refetchQueries(\n    queryKey?: QueryKeyWithRef,\n    filters?: QueryFilters,\n    options?: RefetchOptions\n  ): Promise<void>\n  refetchQueries(\n    arg1?: QueryKeyWithRef | QueryFilters,\n    arg2?: QueryFilters | RefetchOptions,\n    arg3?: RefetchOptions\n  ): Promise<void> {\n    const [filters, options] = parseFilterArgs(arg1, arg2, arg3)\n\n    const promises = this.queryCache\n      .findAll(filters)\n      .map(query => query.fetch())\n\n    let promise = Promise.all(promises).then(noop)\n\n    if (!options?.throwOnError) {\n      promise = promise.catch(noop)\n    }\n\n    return promise\n  }\n\n  fetchQuery<TQueryFnData = unknown, TError = unknown, TData = TQueryFnData>(\n    options: FetchQueryOptions<TQueryFnData, TError, TData>\n  ): Promise<TData>\n  fetchQuery<TQueryFnData = unknown, TError = unknown, TData = TQueryFnData>(\n    queryKey: QueryKeyWithRef,\n    options?: FetchQueryOptions<TQueryFnData, TError, TData>\n  ): Promise<TData>\n  fetchQuery<TQueryFnData = unknown, TError = unknown, TData = TQueryFnData>(\n    queryKey: QueryKeyWithRef,\n    queryFn: QueryFunction<TQueryFnData>,\n    options?: FetchQueryOptions<TQueryFnData, TError, TData>\n  ): Promise<TData>\n  fetchQuery<TQueryFnData, TError, TData = TQueryFnData>(\n    arg1: QueryKeyWithRef | FetchQueryOptions<TQueryFnData, TError, TData>,\n    arg2?:\n      | QueryFunction<TQueryFnData>\n      | FetchQueryOptions<TQueryFnData, TError, TData>,\n    arg3?: FetchQueryOptions<TQueryFnData, TError, TData>\n  ): Promise<TData> {\n    const parsedOptions = parseQueryArgs(arg1, arg2, arg3)\n    const defaultedOptions = this.defaultQueryOptions(parsedOptions)\n\n    // https://github.com/tannerlinsley/react-query/issues/652\n    if (typeof defaultedOptions.retry === 'undefined') {\n      defaultedOptions.retry = false\n    }\n\n    const query = this.queryCache.build(this, defaultedOptions)\n\n    // @ts-ignore\n    return query.isStaleByTime(defaultedOptions.staleTime)\n      ? query.fetch(defaultedOptions)\n      : Promise.resolve(query.state.data as TData)\n  }\n\n  prefetchQuery(options: FetchQueryOptions): Promise<void>\n  prefetchQuery(queryKey: QueryKey, options?: FetchQueryOptions): Promise<void>\n  prefetchQuery(\n    queryKey: QueryKey,\n    queryFn: QueryFunction,\n    options?: FetchQueryOptions\n  ): Promise<void>\n  prefetchQuery(\n    arg1: QueryKey | FetchQueryOptions,\n    arg2?: QueryFunction | FetchQueryOptions,\n    arg3?: FetchQueryOptions\n  ): Promise<void> {\n    return this.fetchQuery(arg1 as any, arg2 as any, arg3)\n      .then(noop)\n      .catch(noop)\n  }\n\n  fetchInfiniteQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData\n  >(\n    options: FetchInfiniteQueryOptions<TQueryFnData, TError, TData>\n  ): Promise<InfiniteData<TData>>\n  fetchInfiniteQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData\n  >(\n    queryKey: QueryKey,\n    options?: FetchInfiniteQueryOptions<TQueryFnData, TError, TData>\n  ): Promise<InfiniteData<TData>>\n  fetchInfiniteQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData\n  >(\n    queryKey: QueryKey,\n    queryFn: QueryFunction<TQueryFnData>,\n    options?: FetchInfiniteQueryOptions<TQueryFnData, TError, TData>\n  ): Promise<InfiniteData<TData>>\n  fetchInfiniteQuery<TQueryFnData, TError, TData = TQueryFnData>(\n    arg1: QueryKey | FetchInfiniteQueryOptions<TQueryFnData, TError, TData>,\n    arg2?:\n      | QueryFunction<TQueryFnData>\n      | FetchInfiniteQueryOptions<TQueryFnData, TError, TData>,\n    arg3?: FetchInfiniteQueryOptions<TQueryFnData, TError, TData>\n  ): Promise<InfiniteData<TData>> {\n    const parsedOptions = parseQueryArgs(arg1, arg2, arg3)\n    parsedOptions.behavior = infiniteQueryBehavior<\n      TQueryFnData,\n      TError,\n      TData\n    >()\n    return this.fetchQuery(parsedOptions)\n  }\n\n  prefetchInfiniteQuery(options: FetchInfiniteQueryOptions): Promise<void>\n  prefetchInfiniteQuery(\n    queryKey: QueryKeyWithRef,\n    options?: FetchInfiniteQueryOptions\n  ): Promise<void>\n  prefetchInfiniteQuery(\n    queryKey: QueryKeyWithRef,\n    queryFn: QueryFunction,\n    options?: FetchInfiniteQueryOptions\n  ): Promise<void>\n  prefetchInfiniteQuery(\n    arg1: QueryKeyWithRef | FetchInfiniteQueryOptions,\n    arg2?: QueryFunction | FetchInfiniteQueryOptions,\n    arg3?: FetchInfiniteQueryOptions\n  ): Promise<void> {\n    return this.fetchInfiniteQuery(arg1 as any, arg2 as any, arg3)\n      .then(noop)\n      .catch(noop)\n  }\n\n  cancelMutations(): Promise<void> {\n    const promises = this.mutationCache\n      .getAll()\n      .map(mutation => mutation.cancel())\n\n    return Promise.all(promises).then(noop).catch(noop)\n  }\n\n  resumePausedMutations(): Promise<void> {\n    return this.getMutationCache().resumePausedMutations()\n  }\n\n  executeMutation<\n    TData = unknown,\n    TError = unknown,\n    TVariables = void,\n    TContext = unknown\n  >(\n    options: MutationOptions<TData, TError, TVariables, TContext>\n  ): Promise<TData> {\n    return this.mutationCache.build(this, options).execute()\n  }\n\n  getQueryCache(): QueryCache {\n    return this.queryCache\n  }\n\n  getMutationCache(): MutationCache {\n    return this.mutationCache\n  }\n\n  getDefaultOptions(): DefaultOptions {\n    return this.defaultOptions\n  }\n\n  setDefaultOptions(options: DefaultOptions): void {\n    this.defaultOptions = options\n  }\n\n  setQueryDefaults(\n    queryKey: QueryKey,\n    options: QueryObserverOptions<any, any, any, any>\n  ): void {\n    const result = this.queryDefaults.find(\n      x => hashQueryKey(queryKey) === hashQueryKey(x.queryKey)\n    )\n    if (result) {\n      result.defaultOptions = options\n    } else {\n      this.queryDefaults.push({ queryKey, defaultOptions: options })\n    }\n  }\n\n  getQueryDefaults(\n    queryKey?: QueryKey\n  ): QueryObserverOptions<any, any, any, any> | undefined {\n    return queryKey\n      ? this.queryDefaults.find(x => partialMatchKey(queryKey, x.queryKey))\n          ?.defaultOptions\n      : undefined\n  }\n\n  setMutationDefaults(\n    mutationKey: MutationKey,\n    options: MutationObserverOptions<any, any, any, any>\n  ): void {\n    const result = this.mutationDefaults.find(\n      x => hashQueryKey(mutationKey) === hashQueryKey(x.mutationKey)\n    )\n    if (result) {\n      result.defaultOptions = options\n    } else {\n      this.mutationDefaults.push({ mutationKey, defaultOptions: options })\n    }\n  }\n\n  getMutationDefaults(\n    mutationKey?: MutationKey\n  ): MutationObserverOptions<any, any, any, any> | undefined {\n    return mutationKey\n      ? this.mutationDefaults.find(x =>\n          partialMatchKey(mutationKey, x.mutationKey)\n        )?.defaultOptions\n      : undefined\n  }\n\n  defaultQueryOptions<T extends QueryOptions<any, any, any>>(options?: T): T {\n    if (options?._defaulted) {\n      return options\n    }\n    return {\n      ...this.defaultOptions.queries,\n      ...this.getQueryDefaults(options?.queryKey),\n      ...options,\n      _defaulted: true,\n    } as T\n  }\n\n  defaultQueryObserverOptions<\n    T extends QueryObserverOptions<any, any, any, any>\n  >(options?: T): T {\n    return this.defaultQueryOptions(options)\n  }\n\n  defaultMutationOptions<T extends MutationOptions<any, any, any, any>>(\n    options?: T\n  ): T {\n    if (options?._defaulted) {\n      return options\n    }\n    return {\n      ...this.defaultOptions.mutations,\n      ...this.getMutationDefaults(options?.mutationKey),\n      ...options,\n      _defaulted: true,\n    } as T\n  }\n\n  clear(): void {\n    this.queryCache.clear()\n    this.mutationCache.clear()\n  }\n}\n","import { reactive, readonly } from 'vue'\n\nimport {\n  getStatusProps,\n  isServer,\n  isValidTimeout,\n  noop,\n  replaceEqualDeep,\n  timeUntilStale,\n} from './utils'\nimport type {\n  PlaceholderDataFunction,\n  QueryObserverBaseResult,\n  QueryObserverOptions,\n  QueryObserverResult,\n  QueryOptions,\n  RefetchOptions,\n  ResultOptions,\n} from './types'\nimport type { Query, QueryState, Action, FetchOptions } from './query'\nimport type { QueryClient } from './queryClient'\nimport { focusManager } from './focusManager'\nimport { Subscribable } from './subscribable'\n\ntype QueryObserverListener<TData, TError> = (\n  result: QueryObserverResult<TData, TError>\n) => void\n\ninterface NotifyOptions {\n  cache?: boolean\n  onError?: boolean\n  onSuccess?: boolean\n}\n\nexport interface ObserverFetchOptions extends FetchOptions {\n  throwOnError?: boolean\n}\n\nexport class QueryObserver<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryData = TQueryFnData\n> extends Subscribable<QueryObserverListener<TData, TError>> {\n  options: QueryObserverOptions<TQueryFnData, TError, TData, TQueryData>\n\n  private client: QueryClient\n  private currentQuery!: Query<TQueryFnData, TError, TQueryData>\n  private currentResult!: QueryObserverResult<TData, TError>\n  private readonlyResult!: QueryObserverResult<TData, TError>\n  private currentResultState?: QueryState<TQueryData, TError>\n  private previousQueryResult?: QueryObserverResult<TData, TError>\n  private initialDataUpdateCount: number\n  private initialErrorUpdateCount: number\n  private staleTimeoutId?: number\n  private refetchIntervalId?: number\n\n  constructor(\n    client: QueryClient,\n    options: QueryObserverOptions<TQueryFnData, TError, TData, TQueryData>\n  ) {\n    super()\n\n    this.client = client\n    this.options = options\n    this.initialDataUpdateCount = 0\n    this.initialErrorUpdateCount = 0\n    this.bindMethods()\n    this.setOptions(options)\n  }\n\n  protected bindMethods(): void {\n    this.remove = this.remove.bind(this)\n    this.refetch = this.refetch.bind(this)\n  }\n\n  protected onSubscribe(): void {\n    if (this.listeners.length === 1) {\n      this.updateQuery()\n\n      this.currentQuery.addObserver(this)\n\n      if (this.willFetchOnMount()) {\n        this.executeFetch()\n      }\n\n      this.updateTimers()\n    }\n  }\n\n  protected onUnsubscribe(): void {\n    if (!this.listeners.length) {\n      this.destroy()\n    }\n  }\n\n  willLoadOnMount(): boolean {\n    return (\n      this.options.enabled !== false && !this.currentQuery.state.dataUpdatedAt\n    )\n  }\n\n  willRefetchOnMount(): boolean {\n    return (\n      this.options.enabled !== false &&\n      this.currentQuery.state.dataUpdatedAt > 0 &&\n      (this.options.refetchOnMount === 'always' ||\n        (this.options.refetchOnMount !== false && this.isStale()))\n    )\n  }\n\n  willFetchOnMount(): boolean {\n    return this.willLoadOnMount() || this.willRefetchOnMount()\n  }\n\n  willFetchOnReconnect(): boolean {\n    return (\n      this.options.enabled !== false &&\n      (this.options.refetchOnReconnect === 'always' ||\n        (this.options.refetchOnReconnect !== false && this.isStale()))\n    )\n  }\n\n  willFetchOnWindowFocus(): boolean {\n    return (\n      this.options.enabled !== false &&\n      (this.options.refetchOnWindowFocus === 'always' ||\n        (this.options.refetchOnWindowFocus !== false && this.isStale()))\n    )\n  }\n\n  private willFetchOptionally(): boolean {\n    return this.options.enabled !== false && this.isStale()\n  }\n\n  private isStale(): boolean {\n    return this.currentQuery.isStaleByTime(this.options.staleTime)\n  }\n\n  destroy(): void {\n    this.listeners = []\n    this.clearTimers()\n    this.currentQuery.removeObserver(this)\n  }\n\n  setOptions(\n    options?: QueryObserverOptions<TQueryFnData, TError, TData, TQueryData>\n  ): void {\n    const prevOptions = { ...this.options }\n    const prevQuery = this.currentQuery\n\n    this.options = this.client.defaultQueryObserverOptions(options)\n\n    if (\n      typeof this.options.enabled !== 'undefined' &&\n      typeof this.options.enabled !== 'boolean'\n    ) {\n      throw new Error('Expected enabled to be a boolean')\n    }\n\n    // Keep previous query key if the user does not supply one\n    if (!this.options.queryKey) {\n      this.options.queryKey = prevOptions.queryKey\n    }\n\n    this.updateQuery()\n\n    // Take no further actions if there are no subscribers\n    if (!this.listeners.length) {\n      return\n    }\n\n    // If we subscribed to a new query, optionally fetch and update refetch\n    if (this.currentQuery !== prevQuery) {\n      this.optionalFetch()\n      this.updateTimers()\n      return\n    }\n\n    // Optionally fetch if the query became enabled\n    if (this.options.enabled !== false && prevOptions.enabled === false) {\n      this.optionalFetch()\n    }\n\n    // Update stale interval if needed\n    if (\n      this.options.enabled !== prevOptions.enabled ||\n      this.options.staleTime !== prevOptions.staleTime\n    ) {\n      this.updateStaleTimeout()\n    }\n\n    // Update refetch interval if needed\n    if (\n      this.options.enabled !== prevOptions.enabled ||\n      this.options.refetchInterval !== prevOptions.refetchInterval\n    ) {\n      this.updateRefetchInterval()\n    }\n  }\n\n  protected getCurrentResult(): QueryObserverResult<TData, TError> {\n    return this.currentResult\n  }\n\n  getReadonlyResult(): QueryObserverResult<TData, TError> {\n    return (\n      this.readonlyResult ||\n      (this.readonlyResult = readonly(\n        this.currentResult\n      ) as QueryObserverResult<TData, TError>)\n    )\n  }\n\n  getNextResult(\n    options?: ResultOptions\n  ): Promise<QueryObserverResult<TData, TError>> {\n    return new Promise((resolve, reject) => {\n      const unsubscribe = this.subscribe(result => {\n        if (!result.isFetching) {\n          unsubscribe()\n          if (result.isError && options?.throwOnError) {\n            reject(result.error)\n          } else {\n            resolve(result)\n          }\n        }\n      })\n    })\n  }\n\n  getCurrentQuery(): Query<TQueryFnData, TError, TQueryData> {\n    return this.currentQuery\n  }\n\n  remove(): void {\n    this.client.getQueryCache().remove(this.currentQuery)\n  }\n\n  refetch(\n    options?: RefetchOptions\n  ): Promise<QueryObserverResult<TData, TError>> {\n    return this.fetch(options)\n  }\n\n  protected fetch(\n    fetchOptions?: ObserverFetchOptions\n  ): Promise<QueryObserverResult<TData, TError>> {\n    return this.executeFetch(fetchOptions).then(() => {\n      this.updateResult()\n      return this.currentResult\n    })\n  }\n\n  private optionalFetch(): void {\n    if (this.willFetchOptionally()) {\n      this.executeFetch()\n    }\n  }\n\n  private executeFetch(\n    fetchOptions?: ObserverFetchOptions\n  ): Promise<TQueryData | undefined> {\n    // Make sure we reference the latest query as the current one might have been removed\n    this.updateQuery()\n\n    // Fetch\n    let promise: Promise<TQueryData | undefined> = this.currentQuery.fetch(\n      this.options as QueryOptions<TQueryFnData, TError, TQueryData>,\n      fetchOptions\n    )\n\n    if (!fetchOptions?.throwOnError) {\n      promise = promise.catch(noop)\n    }\n\n    return promise\n  }\n\n  private updateStaleTimeout(): void {\n    this.clearStaleTimeout()\n\n    if (\n      isServer ||\n      this.currentResult.isStale ||\n      !isValidTimeout(this.options.staleTime)\n    ) {\n      return\n    }\n\n    const time = timeUntilStale(\n      this.currentResult.dataUpdatedAt,\n      this.options.staleTime\n    )\n\n    // The timeout is sometimes triggered 1 ms before the stale time expiration.\n    // To mitigate this issue we always add 1 ms to the timeout.\n    const timeout = time + 1\n\n    this.staleTimeoutId = setTimeout(() => {\n      if (!this.currentResult.isStale) {\n        this.updateResult()\n        this.notify({\n          cache: true,\n        })\n      }\n    }, timeout)\n  }\n\n  private updateRefetchInterval(): void {\n    this.clearRefetchInterval()\n\n    if (\n      isServer ||\n      this.options.enabled === false ||\n      !isValidTimeout(this.options.refetchInterval)\n    ) {\n      return\n    }\n\n    this.refetchIntervalId = setInterval(() => {\n      if (\n        this.options.refetchIntervalInBackground ||\n        focusManager.isFocused()\n      ) {\n        this.executeFetch()\n      }\n    }, this.options.refetchInterval)\n  }\n\n  private updateTimers(): void {\n    this.updateStaleTimeout()\n    this.updateRefetchInterval()\n  }\n\n  private clearTimers(): void {\n    this.clearStaleTimeout()\n    this.clearRefetchInterval()\n  }\n\n  private clearStaleTimeout(): void {\n    clearTimeout(this.staleTimeoutId)\n    this.staleTimeoutId = undefined\n  }\n\n  private clearRefetchInterval(): void {\n    clearInterval(this.refetchIntervalId)\n    this.refetchIntervalId = undefined\n  }\n\n  protected updateResult(willFetch?: boolean) {\n    const { state } = this.currentQuery\n    let { isFetching, status } = state\n    let isPreviousData = false\n    let isPlaceholderData = false\n    let data: TData | undefined\n    let dataUpdatedAt = state.dataUpdatedAt\n\n    // Optimistically set status to loading if we will start fetching\n    if (willFetch) {\n      isFetching = true\n      if (status === 'idle') {\n        status = 'loading'\n      }\n    }\n\n    // Keep previous data if needed\n    if (\n      this.options.keepPreviousData &&\n      !state.dataUpdateCount &&\n      this.previousQueryResult?.isSuccess\n    ) {\n      data = this.previousQueryResult.data\n      dataUpdatedAt = this.previousQueryResult.dataUpdatedAt\n      status = this.previousQueryResult.status\n      isPreviousData = true\n    }\n    // Select data if needed\n    else if (this.options.select && typeof state.data !== 'undefined') {\n      // Use the previous select result if the query data did not change\n      if (this.currentResult && state.data === this.currentResultState?.data) {\n        data = this.currentResult.data\n      } else {\n        data = this.options.select(state.data)\n        if (this.options.structuralSharing !== false) {\n          data = replaceEqualDeep(this.currentResult?.data, data)\n        }\n      }\n    }\n    // Use query data\n    else {\n      data = (state.data as unknown) as TData\n    }\n\n    // Show placeholder data if needed\n    if (\n      typeof this.options.placeholderData !== 'undefined' &&\n      typeof data === 'undefined' &&\n      status === 'loading'\n    ) {\n      const placeholderData =\n        typeof this.options.placeholderData === 'function'\n          ? (this.options.placeholderData as PlaceholderDataFunction<TData>)()\n          : this.options.placeholderData\n      if (typeof placeholderData !== 'undefined') {\n        status = 'success'\n        data = placeholderData\n        isPlaceholderData = true\n      }\n    }\n\n    const result: QueryObserverBaseResult<TData, TError> = {\n      ...getStatusProps(status),\n      data,\n      dataUpdatedAt,\n      error: state.error,\n      errorUpdatedAt: state.errorUpdateCount,\n      failureCount: state.fetchFailureCount,\n      isFetched: state.dataUpdateCount > 0 || state.errorUpdateCount > 0,\n      isFetchedAfterMount:\n        state.dataUpdateCount > this.initialDataUpdateCount ||\n        state.errorUpdateCount > this.initialErrorUpdateCount,\n      isFetching,\n      isLoadingError: status === 'error' && state.dataUpdatedAt === 0,\n      isPlaceholderData,\n      isPreviousData,\n      isRefetchError: status === 'error' && state.dataUpdatedAt !== 0,\n      isStale: this.isStale(),\n      refetch: this.refetch,\n      remove: this.remove,\n    }\n\n    if (this.currentResult) {\n      Object.assign(this.currentResult, result)\n    } else {\n      this.currentResult = reactive(result) as QueryObserverResult<\n        TData,\n        TError\n      >\n    }\n  }\n\n  private updateQuery(): void {\n    const prevQuery = this.currentQuery\n\n    const query = this.client\n      .getQueryCache()\n      .build(\n        this.client,\n        this.options as QueryOptions<TQueryFnData, TError, TQueryData>\n      )\n\n    if (query === prevQuery) {\n      return\n    }\n\n    this.previousQueryResult = { ...this.currentResult }\n    this.currentQuery = query\n    this.initialDataUpdateCount = query.state.dataUpdateCount\n    this.initialErrorUpdateCount = query.state.errorUpdateCount\n\n    const willFetch = prevQuery\n      ? this.willFetchOptionally()\n      : this.willFetchOnMount()\n\n    this.updateResult(willFetch)\n\n    if (!this.hasListeners()) {\n      return\n    }\n\n    prevQuery?.removeObserver(this)\n    this.currentQuery.addObserver(this)\n\n    this.notify({})\n  }\n\n  onQueryUpdate(action: Action<TData, TError>): void {\n    this.updateResult()\n    // Update timers\n    this.updateTimers()\n\n    // Determine which callbacks to trigger\n    const notifyOptions: NotifyOptions = {}\n\n    if (action.type === 'success') {\n      notifyOptions.onSuccess = true\n    } else if (action.type === 'error') {\n      notifyOptions.onError = true\n    }\n\n    this.notify(notifyOptions)\n  }\n\n  private notify(notifyOptions: NotifyOptions): void {\n    // First trigger the configuration callbacks\n    if (notifyOptions.onSuccess) {\n      this.options.onSuccess?.(this.readonlyResult.data!)\n      this.options.onSettled?.(this.readonlyResult.data!, null)\n    } else if (notifyOptions.onError) {\n      this.options.onError?.(this.readonlyResult.error!)\n      this.options.onSettled?.(undefined, this.readonlyResult.error!)\n    }\n\n    // Then trigger the listeners\n    this.listeners.forEach(listener => {\n      listener(this.readonlyResult)\n    })\n\n    // Then the cache listeners\n    if (notifyOptions.cache) {\n      this.client.getQueryCache().notify(this.currentQuery)\n    }\n  }\n}\n","import { difference, getQueryKeyHashFn } from './utils'\nimport type { QueryObserverOptions, QueryObserverResult } from './types'\nimport type { QueryClient } from './queryClient'\nimport { QueryObserver } from './queryObserver'\nimport { Subscribable } from './subscribable'\n\ntype QueriesObserverListener = (result: QueryObserverResult[]) => void\n\nexport class QueriesObserver extends Subscribable<QueriesObserverListener> {\n  private client: QueryClient\n  private result!: QueryObserverResult[]\n  private queries: QueryObserverOptions[]\n  private observers: QueryObserver[]\n\n  constructor(client: QueryClient, queries?: QueryObserverOptions[]) {\n    super()\n\n    this.client = client\n    this.queries = queries || []\n    this.observers = []\n\n    // Subscribe to queries\n    this.updateObservers()\n  }\n\n  protected onSubscribe(): void {\n    if (this.listeners.length === 1) {\n      this.observers.forEach(observer => {\n        observer.subscribe(result => {\n          this.onUpdate(observer, result)\n        })\n      })\n    }\n  }\n\n  protected onUnsubscribe(): void {\n    if (!this.listeners.length) {\n      this.destroy()\n    }\n  }\n\n  destroy(): void {\n    this.listeners = []\n    this.observers.forEach(observer => {\n      observer.destroy()\n    })\n  }\n\n  setQueries(queries: QueryObserverOptions[]): void {\n    this.queries = queries\n    this.updateObservers()\n  }\n\n  getCurrentResult(): QueryObserverResult[] {\n    return this.result\n  }\n\n  private updateObservers(): void {\n    let hasIndexChange = false\n\n    const prevObservers = this.observers\n    const newObservers = this.queries.map((options, i) => {\n      let observer: QueryObserver | undefined = prevObservers[i]\n\n      const defaultedOptions = this.client.defaultQueryObserverOptions(options)\n      const hashFn = getQueryKeyHashFn(defaultedOptions)\n      defaultedOptions.queryHash = hashFn(defaultedOptions.queryKey!)\n\n      if (\n        !observer ||\n        observer.getCurrentQuery().queryHash !== defaultedOptions.queryHash\n      ) {\n        hasIndexChange = true\n        observer = prevObservers.find(\n          x => x.getCurrentQuery().queryHash === defaultedOptions.queryHash\n        )\n      }\n\n      if (observer) {\n        observer.setOptions(defaultedOptions)\n        return observer\n      }\n\n      return new QueryObserver(this.client, defaultedOptions)\n    })\n\n    if (prevObservers.length === newObservers.length && !hasIndexChange) {\n      return\n    }\n\n    this.observers = newObservers\n    this.result = newObservers.map(observer => observer.getReadonlyResult())\n\n    if (!this.listeners.length) {\n      return\n    }\n\n    difference(prevObservers, newObservers).forEach(observer => {\n      observer.destroy()\n    })\n\n    difference(newObservers, prevObservers).forEach(observer => {\n      observer.subscribe(result => {\n        this.onUpdate(observer, result)\n      })\n    })\n\n    this.notify()\n  }\n\n  private onUpdate(observer: QueryObserver, result: QueryObserverResult): void {\n    const index = this.observers.indexOf(observer)\n    if (index !== -1) {\n      this.result[index] = result\n      this.notify()\n    }\n  }\n\n  private notify(): void {\n    this.listeners.forEach(listener => {\n      listener(this.result)\n    })\n  }\n}\n","import type {\n  FetchNextPageOptions,\n  FetchPreviousPageOptions,\n  InfiniteData,\n  InfiniteQueryObserverOptions,\n  InfiniteQueryObserverResult,\n} from './types'\nimport type { QueryClient } from './queryClient'\nimport { ObserverFetchOptions, QueryObserver } from './queryObserver'\nimport {\n  hasNextPage,\n  hasPreviousPage,\n  infiniteQueryBehavior,\n} from './infiniteQueryBehavior'\n\ntype InfiniteQueryObserverListener<TData, TError> = (\n  result: InfiniteQueryObserverResult<TData, TError>\n) => void\n\nexport class InfiniteQueryObserver<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryData = TQueryFnData\n> extends QueryObserver<\n  TQueryFnData,\n  TError,\n  InfiniteData<TData>,\n  InfiniteData<TQueryData>\n> {\n  // Type override\n  subscribe!: (\n    listener?: InfiniteQueryObserverListener<TData, TError>\n  ) => () => void\n\n  // Type override\n  getCurrentResult!: () => InfiniteQueryObserverResult<TData, TError>\n\n  // Type override\n  protected fetch!: (\n    fetchOptions?: ObserverFetchOptions\n  ) => Promise<InfiniteQueryObserverResult<TData, TError>>\n\n  // eslint-disable-next-line @typescript-eslint/no-useless-constructor\n  constructor(\n    client: QueryClient,\n    options: InfiniteQueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData\n    >\n  ) {\n    super(client, options)\n  }\n\n  protected bindMethods(): void {\n    super.bindMethods()\n    this.fetchNextPage = this.fetchNextPage.bind(this)\n    this.fetchPreviousPage = this.fetchPreviousPage.bind(this)\n  }\n\n  setOptions(\n    options?: InfiniteQueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData\n    >\n  ): void {\n    super.setOptions({\n      ...options,\n      behavior: infiniteQueryBehavior<TQueryFnData, TError, TData>(),\n    })\n  }\n\n  fetchNextPage(\n    options?: FetchNextPageOptions\n  ): Promise<InfiniteQueryObserverResult<TData, TError>> {\n    return this.fetch({\n      cancelRefetch: true,\n      throwOnError: options?.throwOnError,\n      meta: {\n        fetchMore: { direction: 'forward', pageParam: options?.pageParam },\n      },\n    })\n  }\n\n  fetchPreviousPage(\n    options?: FetchPreviousPageOptions\n  ): Promise<InfiniteQueryObserverResult<TData, TError>> {\n    return this.fetch({\n      cancelRefetch: true,\n      throwOnError: options?.throwOnError,\n      meta: {\n        fetchMore: { direction: 'backward', pageParam: options?.pageParam },\n      },\n    })\n  }\n\n  protected updateResult(willFetch?: boolean) {\n    const { state } = this.getCurrentQuery()\n    super.updateResult(willFetch)\n\n    Object.assign(super.getCurrentResult(), {\n      fetchNextPage: this.fetchNextPage,\n      fetchPreviousPage: this.fetchPreviousPage,\n      hasNextPage: hasNextPage(this.options, state.data?.pages),\n      hasPreviousPage: hasPreviousPage(this.options, state.data?.pages),\n      isFetchingNextPage:\n        state.isFetching && state.fetchMeta?.fetchMore?.direction === 'forward',\n      isFetchingPreviousPage:\n        state.isFetching &&\n        state.fetchMeta?.fetchMore?.direction === 'backward',\n    })\n  }\n}\n","import { Action, getDefaultState, Mutation } from './mutation'\nimport type { QueryClient } from './queryClient'\nimport { Subscribable } from './subscribable'\nimport type {\n  MutateOptions,\n  MutationObserverResult,\n  MutationObserverOptions,\n} from './types'\nimport { getStatusProps } from './utils'\n\n// TYPES\n\ntype MutationObserverListener<TData, TError, TVariables, TContext> = (\n  result: MutationObserverResult<TData, TError, TVariables, TContext>\n) => void\n\ninterface NotifyOptions {\n  listeners?: boolean\n  onError?: boolean\n  onSuccess?: boolean\n}\n\n// CLASS\n\nexport class MutationObserver<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown\n> extends Subscribable<\n  MutationObserverListener<TData, TError, TVariables, TContext>\n> {\n  options!: MutationObserverOptions<TData, TError, TVariables, TContext>\n\n  private client: QueryClient\n  private currentResult!: MutationObserverResult<\n    TData,\n    TError,\n    TVariables,\n    TContext\n  >\n  private currentMutation?: Mutation<TData, TError, TVariables, TContext>\n  private mutateOptions?: MutateOptions<TData, TError, TVariables, TContext>\n\n  constructor(\n    client: QueryClient,\n    options: MutationObserverOptions<TData, TError, TVariables, TContext>\n  ) {\n    super()\n\n    this.client = client\n    this.setOptions(options)\n    this.bindMethods()\n    this.updateResult()\n  }\n\n  protected bindMethods(): void {\n    this.mutate = this.mutate.bind(this)\n    this.reset = this.reset.bind(this)\n  }\n\n  setOptions(\n    options?: MutationObserverOptions<TData, TError, TVariables, TContext>\n  ) {\n    this.options = this.client.defaultMutationOptions(options)\n  }\n\n  protected onUnsubscribe(): void {\n    if (!this.listeners.length) {\n      this.currentMutation?.removeObserver(this)\n    }\n  }\n\n  onMutationUpdate(action: Action<TData, TError, TVariables, TContext>): void {\n    this.updateResult()\n\n    // Determine which callbacks to trigger\n    const notifyOptions: NotifyOptions = {\n      listeners: true,\n    }\n\n    if (action.type === 'success') {\n      notifyOptions.onSuccess = true\n    } else if (action.type === 'error') {\n      notifyOptions.onError = true\n    }\n\n    this.notify(notifyOptions)\n  }\n\n  getCurrentResult(): MutationObserverResult<\n    TData,\n    TError,\n    TVariables,\n    TContext\n  > {\n    return this.currentResult\n  }\n\n  reset(): void {\n    this.currentMutation = undefined\n    this.updateResult()\n    this.notify({ listeners: true })\n  }\n\n  mutate(\n    variables?: TVariables,\n    options?: MutateOptions<TData, TError, TVariables, TContext>\n  ): Promise<TData> {\n    this.mutateOptions = options\n\n    if (this.currentMutation) {\n      this.currentMutation.removeObserver(this)\n    }\n\n    this.currentMutation = this.client.getMutationCache().build(this.client, {\n      ...this.options,\n      variables: variables ?? this.options.variables,\n    })\n\n    this.currentMutation.addObserver(this)\n\n    return this.currentMutation.execute()\n  }\n\n  private updateResult(): void {\n    const state = this.currentMutation\n      ? this.currentMutation.state\n      : getDefaultState<TData, TError, TVariables, TContext>()\n\n    this.currentResult = {\n      ...state,\n      ...getStatusProps(state.status),\n      mutate: this.mutate,\n      reset: this.reset,\n    }\n  }\n\n  private notify(options: NotifyOptions) {\n    // First trigger the mutate callbacks\n    if (this.mutateOptions) {\n      if (options.onSuccess) {\n        this.mutateOptions.onSuccess?.(\n          this.currentResult.data!,\n          this.currentResult.variables!,\n          this.currentResult.context!\n        )\n        this.mutateOptions.onSettled?.(\n          this.currentResult.data!,\n          null,\n          this.currentResult.variables!,\n          this.currentResult.context\n        )\n      } else if (options.onError) {\n        this.mutateOptions.onError?.(\n          this.currentResult.error!,\n          this.currentResult.variables!,\n          this.currentResult.context\n        )\n        this.mutateOptions.onSettled?.(\n          undefined,\n          this.currentResult.error,\n          this.currentResult.variables!,\n          this.currentResult.context\n        )\n      }\n    }\n\n    // Then trigger the listeners\n    if (options.listeners) {\n      this.listeners.forEach(listener => {\n        listener(this.currentResult)\n      })\n    }\n  }\n}\n","import type { Logger } from '../core/logger'\n\nexport const logger: Logger = console\n","import { setLogger } from '../core'\nimport { logger } from './logger'\n\nif (logger) {\n  setLogger(logger)\n}\n","import { defineComponent, inject, onMounted, onUnmounted, provide } from 'vue'\n\nimport { QueryClient } from '../core'\n\nconst symbol = Symbol('QueryClientProvider')\n\nexport const useQueryClient = () => {\n  const queryClient = inject<QueryClient | undefined>(symbol, undefined)\n\n  if (!queryClient) {\n    throw new Error('No QueryClient set, use QueryClientProvider to set one')\n  }\n\n  return queryClient\n}\n\nexport interface QueryClientProviderProps {\n  client: QueryClient\n}\n\nexport const QueryClientProvider = defineComponent<QueryClientProviderProps>({\n  name: 'QueryClientProvider',\n  setup(props, { slots }) {\n    const { client } = props\n\n    provide(symbol, client)\n    onMounted(() => {\n      client.mount()\n    })\n    onUnmounted(() => {\n      client.unmount()\n    })\n\n    return slots.default?.()\n  },\n})\n","import { onMounted, onUnmounted, ref, Ref } from 'vue'\n\nimport { QueryKeyWithRef } from '../core/types'\nimport { parseFilterArgs, QueryFilters } from '../core/utils'\nimport { useQueryClient } from './QueryClientProvider'\n\nexport function useIsFetching(filters?: QueryFilters): Ref<number>\nexport function useIsFetching(\n  queryKey?: QueryKeyWithRef,\n  filters?: QueryFilters\n): Ref<number>\nexport function useIsFetching(\n  arg1?: QueryKeyWithRef | QueryFilters,\n  arg2?: QueryFilters\n): Ref<number> {\n  const queryClient = useQueryClient()\n  const [filters] = parseFilterArgs(arg1, arg2)\n\n  const isFetching = ref<number>(queryClient.isFetching(filters))\n\n  let unsubscribe: () => void\n  onMounted(() => {\n    unsubscribe = queryClient.getQueryCache().subscribe(() => {\n      const newIsFetching = queryClient.isFetching(filters)\n      isFetching.value = newIsFetching\n    })\n  })\n  onUnmounted(() => {\n    unsubscribe?.()\n  })\n\n  return isFetching\n}\n","import { reactive, readonly, watchEffect, onMounted, onUnmounted } from 'vue'\n\nimport { noop, parseMutationArgs } from '../core/utils'\nimport { MutationObserver } from '../core/mutationObserver'\nimport { useQueryClient } from './QueryClientProvider'\nimport {\n  UseMutateFunction,\n  UseMutationOptions,\n  UseMutationResult,\n} from './types'\nimport {\n  MutationFunction,\n  MutationKey,\n  MutationObserverResult,\n} from '../core/types'\n\n// HOOK\n\nexport function useMutation<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown\n>(\n  options: UseMutationOptions<TData, TError, TVariables, TContext>\n): UseMutationResult<TData, TError, TVariables, TContext>\nexport function useMutation<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown\n>(\n  mutationFn: MutationFunction<TData, TVariables>,\n  options?: UseMutationOptions<TData, TError, TVariables, TContext>\n): UseMutationResult<TData, TError, TVariables, TContext>\nexport function useMutation<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown\n>(\n  mutationKey: MutationKey,\n  options?: UseMutationOptions<TData, TError, TVariables, TContext>\n): UseMutationResult<TData, TError, TVariables, TContext>\nexport function useMutation<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown\n>(\n  mutationKey: MutationKey,\n  mutationFn?: MutationFunction<TData, TVariables>,\n  options?: UseMutationOptions<TData, TError, TVariables, TContext>\n): UseMutationResult<TData, TError, TVariables, TContext>\nexport function useMutation<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown\n>(\n  arg1:\n    | MutationKey\n    | MutationFunction<TData, TVariables>\n    | UseMutationOptions<TData, TError, TVariables, TContext>,\n  arg2?:\n    | MutationFunction<TData, TVariables>\n    | UseMutationOptions<TData, TError, TVariables, TContext>,\n  arg3?: UseMutationOptions<TData, TError, TVariables, TContext>\n): UseMutationResult<TData, TError, TVariables, TContext> {\n  const queryClient = useQueryClient()\n\n  // Create mutation observer\n  let observer: MutationObserver<TData, TError, TVariables, TContext>\n\n  // Create mutation currentResult\n  let currentResult!: UseMutationResult<TData, TError, TVariables, TContext>\n\n  watchEffect(() => {\n    const options = parseMutationArgs(arg1, arg2, arg3)\n\n    if (observer) {\n      // Update options\n      if (observer.hasListeners()) {\n        observer.setOptions(options)\n      } else {\n        // init observer & currentResult\n        observer = new MutationObserver(queryClient, options)\n\n        const mutate: UseMutateFunction<TData, TError, TVariables, TContext> = (\n          variables,\n          mutateOptions\n        ) => {\n          observer.mutate(variables, mutateOptions).catch(noop)\n        }\n\n        currentResult = reactive({\n          ...observer.getCurrentResult(),\n          mutate,\n          mutateAsync: observer.getCurrentResult().mutate,\n        }) as UseMutationResult<TData, TError, TVariables, TContext>\n      }\n    }\n  })\n\n  let unsubscribe: () => void\n  onMounted(() => {\n    // Subscribe to the observer\n    unsubscribe = observer.subscribe(\n      (result: MutationObserverResult<TData, TError, TVariables, TContext>) => {\n        // Check if the component is still mounted\n        if (observer.hasListeners()) {\n          Object.assign(currentResult, result)\n        }\n      }\n    )\n  })\n  onUnmounted(() => {\n    unsubscribe?.()\n  })\n\n  return readonly(currentResult) as UseMutationResult<\n    TData,\n    TError,\n    TVariables,\n    TContext\n  >\n}\n","import { onMounted, onUnmounted, watchEffect } from 'vue'\n\nimport { QueryObserver } from '../core/queryObserver'\nimport { useQueryClient } from './QueryClientProvider'\nimport { UseBaseQueryOptions } from './types'\n\nexport function useBaseQuery<TQueryFnData, TError, TData, TQueryData>(\n  optionsFn: () => UseBaseQueryOptions<TQueryFnData, TError, TData, TQueryData>,\n  Observer: typeof QueryObserver\n) {\n  const queryClient = useQueryClient()\n\n  let observer!: QueryObserver<any, any, any, any>\n\n  watchEffect(() => {\n    const defaultedOptions = queryClient.defaultQueryObserverOptions(\n      optionsFn()\n    )\n\n    // Always set stale time when using suspense to prevent\n    // fetching again when directly re-mounting after suspense\n    if (\n      defaultedOptions.suspense &&\n      typeof defaultedOptions.staleTime !== 'number'\n    ) {\n      defaultedOptions.staleTime = 1000\n    }\n\n    if (observer) {\n      // Update options\n      if (observer.hasListeners()) {\n        observer.setOptions(defaultedOptions)\n      }\n    } else {\n      // Create query observer\n      observer = new Observer(queryClient, defaultedOptions)\n    }\n  })\n\n  const currentResult = observer.getReadonlyResult()\n\n  // Subscribe to the observer\n  let unsubscribe: () => void\n  onMounted(() => {\n    unsubscribe = observer.subscribe()\n  })\n  onUnmounted(() => {\n    unsubscribe?.()\n  })\n\n  // Handle suspense\n  if (observer.options.suspense && currentResult.isLoading) {\n    const unsubscribe = observer.subscribe()\n    throw observer.refetch().finally(unsubscribe)\n  }\n\n  return currentResult\n}\n","import { QueryObserver } from '../core'\nimport { QueryFunction, QueryKeyWithRef } from '../core/types'\nimport { parseQueryArgs } from '../core/utils'\nimport { UseQueryOptionsWithRef, UseQueryResult } from './types'\nimport { useBaseQuery } from './useBaseQuery'\n\n// HOOK\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData\n>(\n  options: UseQueryOptionsWithRef<TQueryFnData, TError, TData>\n): UseQueryResult<TData, TError>\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData\n>(\n  queryKey: QueryKeyWithRef,\n  options?: UseQueryOptionsWithRef<TQueryFnData, TError, TData>\n): UseQueryResult<TData, TError>\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData\n>(\n  queryKey: QueryKeyWithRef,\n  queryFn: QueryFunction<TQueryFnData>,\n  options?: UseQueryOptionsWithRef<TQueryFnData, TError, TData>\n): UseQueryResult<TData, TError>\nexport function useQuery<TQueryFnData, TError, TData = TQueryFnData>(\n  arg1: QueryKeyWithRef | UseQueryOptionsWithRef<TQueryFnData, TError, TData>,\n  arg2?:\n    | QueryFunction<TQueryFnData>\n    | UseQueryOptionsWithRef<TQueryFnData, TError, TData>,\n  arg3?: UseQueryOptionsWithRef<TQueryFnData, TError, TData>\n): UseQueryResult<TData, TError> {\n  return useBaseQuery(() => parseQueryArgs(arg1, arg2, arg3), QueryObserver)\n}\n","import { reactive, readonly, watchEffect, onMounted, onUnmounted } from 'vue'\n\nimport { QueriesObserver } from '../core/queriesObserver'\nimport { useQueryClient } from './QueryClientProvider'\nimport { UseQueryOptions, UseQueryResult } from './types'\nimport { replaceShallowEqualDeep } from '../core/utils'\n\nexport function useQueries(queries: UseQueryOptions[]): UseQueryResult[] {\n  const queryClient = useQueryClient()\n\n  // Create queries observer\n  let observer!: QueriesObserver\n\n  watchEffect(() => {\n    if (observer) {\n      // Update queries\n      if (observer.hasListeners()) {\n        observer.setQueries(queries)\n      }\n    } else {\n      observer = new QueriesObserver(queryClient, queries)\n    }\n  })\n\n  const currentResult = reactive(observer.getCurrentResult())\n\n  let unsubscribe: () => void\n  // Subscribe to the observer\n  onMounted(() => {\n    unsubscribe = observer.subscribe(result => {\n      replaceShallowEqualDeep(currentResult, result)\n    })\n  })\n  onUnmounted(() => {\n    unsubscribe?.()\n  })\n\n  return readonly(currentResult) as UseQueryResult[]\n}\n","import { QueryObserver } from '../core'\nimport { InfiniteQueryObserver } from '../core/infiniteQueryObserver'\nimport { QueryFunction, QueryKeyWithRef } from '../core/types'\nimport { parseQueryArgs } from '../core/utils'\nimport { UseInfiniteQueryOptionsWithRef, UseInfiniteQueryResult } from './types'\nimport { useBaseQuery } from './useBaseQuery'\n\n// HOOK\n\nexport function useInfiniteQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData\n>(\n  options: UseInfiniteQueryOptionsWithRef<TQueryFnData, TError, TData>\n): UseInfiniteQueryResult<TData, TError>\nexport function useInfiniteQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData\n>(\n  queryKey: QueryKeyWithRef,\n  options?: UseInfiniteQueryOptionsWithRef<TQueryFnData, TError, TData>\n): UseInfiniteQueryResult<TData, TError>\nexport function useInfiniteQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData\n>(\n  queryKey: QueryKeyWithRef,\n  queryFn: QueryFunction<TQueryFnData>,\n  options?: UseInfiniteQueryOptionsWithRef<TQueryFnData, TError, TData>\n): UseInfiniteQueryResult<TData, TError>\nexport function useInfiniteQuery<TQueryFnData, TError, TData = TQueryFnData>(\n  arg1:\n    | QueryKeyWithRef\n    | UseInfiniteQueryOptionsWithRef<TQueryFnData, TError, TData>,\n  arg2?:\n    | QueryFunction<TQueryFnData>\n    | UseInfiniteQueryOptionsWithRef<TQueryFnData, TError, TData>,\n  arg3?: UseInfiniteQueryOptionsWithRef<TQueryFnData, TError, TData>\n): UseInfiniteQueryResult<TData, TError> {\n  return useBaseQuery(\n    () => parseQueryArgs(arg1, arg2, arg3),\n    InfiniteQueryObserver as typeof QueryObserver\n  ) as UseInfiniteQueryResult<TData, TError>\n}\n"],"names":["_inheritsLoose","subClass","superClass","prototype","Object","create","constructor","__proto__","_extends","assign","target","i","arguments","length","source","key","hasOwnProperty","call","apply","isServer","window","noop","undefined","functionalUpdate","updater","input","isValidTimeout","value","Infinity","ensureArray","Array","isArray","difference","array1","array2","filter","x","indexOf","timeUntilStale","updatedAt","staleTime","Math","max","Date","now","parseQueryArgs","arg1","arg2","arg3","isQueryKey","queryKey","queryFn","unwrapRefs","parseMutationArgs","mutationKey","mutationFn","parseFilterArgs","matchQuery","filters","query","active","exact","fetching","inactive","predicate","stale","hashFn","getQueryKeyHashFn","options","queryHash","partialMatchKey","isActive","isStale","isFetching","queryKeyHashFn","hashQueryKey","stableValueHash","JSON","stringify","_","val","isPlainObject","keys","sort","reduce","result","a","b","partialDeepEqual","some","replaceEqualDeep","array","isSameObject","bSize","splice","aKeys","bKeys","hash","Set","len","has","replaceShallowEqualDeep","o","hasObjectPrototype","ctor","prot","toString","isError","Error","sleep","timeout","Promise","resolve","setTimeout","getStatusProps","status","isLoading","isSuccess","isIdle","refs","isRef","items","size","copy","logger","console","error","warn","log","getLogger","setLogger","newLogger","Subscribable","listeners","subscribe","listener","callback","push","onSubscribe","onUnsubscribe","hasListeners","FocusManager","removeEventListener","setDefaultEventListener","setEventListener","setup","focused","setFocused","onFocus","forEach","isFocused","document","includes","visibilityState","addEventListener","focusManager","OnlineManager","online","setOnline","onOnline","isOnline","navigator","onLine","onlineManager","defaultRetryDelay","failureCount","min","isCancelable","cancel","CancelledError","revert","silent","isCancelledError","Retryer","config","cancelRetry","cancelFn","continueFn","promiseResolve","promiseReject","cancelOptions","isPaused","isResolved","isTransportCancelable","promise","outerResolve","outerReject","reject","pause","continueResolve","onPause","then","onContinue","run","promiseOrValue","fn","retry","retryDelay","delay","shouldRetry","onFail","Query","defaultOptions","setOptions","observers","cache","initialState","state","getDefaultState","innerState","reactive","readonly","scheduleGc","cacheTime","setDefaultOptions","clearGcTimeout","gcTimeout","optionalRemove","clearTimeout","remove","setData","prevData","data","isDataEqual","structuralSharing","dispatch","type","dataUpdatedAt","setState","retryer","destroy","reset","observer","enabled","isInvalidated","getReadonlyResult","isStaleByTime","find","willFetchOnWindowFocus","refetch","willFetchOnReconnect","addObserver","notify","removeObserver","invalidate","fetch","fetchOptions","cancelRefetch","queryFnContext","pageParam","fetchFn","context","behavior","onFetch","fetchMeta","meta","action","reducer","onQueryUpdate","initialData","hasData","dataUpdateCount","errorUpdateCount","errorUpdatedAt","fetchFailureCount","QueryCache","queries","queriesMap","build","client","get","defaultQueryOptions","getQueryDefaults","add","queryInMap","clear","getAll","findAll","Mutation","mutationId","mutationCache","execute","restored","variables","onMutate","executeMutation","onSuccess","onSettled","onError","onMutationUpdate","MutationCache","mutations","mutation","defaultMutationOptions","getMutationDefaults","resumePausedMutations","pausedMutations","infiniteQueryBehavior","fetchMore","isFetchingNextPage","direction","isFetchingPreviousPage","oldPages","pages","oldPageParams","pageParams","newPageParams","fetchPage","manual","param","previous","queryFnResult","page","promiseAsAny","getNextPageParam","getPreviousPageParam","finalPromise","finalPromiseAsAny","hasNextPage","nextPageParam","hasPreviousPage","previousPageParam","QueryClient","queryCache","queryDefaults","mutationDefaults","mount","unsubscribeFocus","unsubscribeOnline","unmount","getQueryData","setQueryData","parsedOptions","defaultedOptions","getQueryState","removeQueries","resetQueries","refetchFilters","refetchQueries","cancelQueries","promises","map","all","invalidateQueries","refetchActive","refetchInactive","throwOnError","fetchQuery","prefetchQuery","fetchInfiniteQuery","prefetchInfiniteQuery","cancelMutations","getMutationCache","getQueryCache","getDefaultOptions","setQueryDefaults","setMutationDefaults","_defaulted","defaultQueryObserverOptions","QueryObserver","initialDataUpdateCount","initialErrorUpdateCount","bindMethods","bind","updateQuery","currentQuery","willFetchOnMount","executeFetch","updateTimers","willLoadOnMount","willRefetchOnMount","refetchOnMount","refetchOnReconnect","refetchOnWindowFocus","willFetchOptionally","clearTimers","prevOptions","prevQuery","optionalFetch","updateStaleTimeout","refetchInterval","updateRefetchInterval","getCurrentResult","currentResult","readonlyResult","getNextResult","unsubscribe","getCurrentQuery","updateResult","clearStaleTimeout","time","staleTimeoutId","clearRefetchInterval","refetchIntervalId","setInterval","refetchIntervalInBackground","clearInterval","willFetch","isPreviousData","isPlaceholderData","keepPreviousData","previousQueryResult","select","currentResultState","placeholderData","isFetched","isFetchedAfterMount","isLoadingError","isRefetchError","notifyOptions","QueriesObserver","updateObservers","onUpdate","setQueries","hasIndexChange","prevObservers","newObservers","index","InfiniteQueryObserver","fetchNextPage","fetchPreviousPage","MutationObserver","mutate","currentMutation","mutateOptions","symbol","Symbol","useQueryClient","queryClient","inject","QueryClientProvider","defineComponent","name","props","slots","provide","onMounted","onUnmounted","useIsFetching","ref","newIsFetching","useMutation","watchEffect","useBaseQuery","optionsFn","Observer","suspense","useQuery","useQueries","useInfiniteQuery"],"mappings":"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"}